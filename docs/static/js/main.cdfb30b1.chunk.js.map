{"version":3,"sources":["common/Token.ts","components/NavigationBar.tsx","actions/ConfigActions.ts","pages/SettingsPage.tsx","common/index.ts","common/Reviewer.ts","components/ModalCard.tsx","actions/TaskActions.ts","components/TodoCards.tsx","pages/TodoPage.tsx","actions/PoolApiActions.ts","pages/LoginPage.tsx","pages/App.tsx","api/AtCoder.ts","api/Codeforces.ts","api/AOJ.ts","api/Yukicoder.ts","actions/ExternalApiActions.ts","sagas/ExternalApiSagas.ts","pool-api/index.ts","sagas/LoginSagas.ts","common/LocalStorage.ts","sagas/DataSagas.ts","sagas/index.ts","common/PooledTask.ts","reducers.ts","index.tsx"],"names":["parseToken","token","tokens","split","_JSON$parse","JSON","parse","atob","expireTimeSecond","expire_time_second","userId","user_id","e","console","error","isValidToke","Date","now","connect","state","dispatch","props","react","Navbar","color","light","expand","NavbarBrand","tag","RouterLink","to","Nav","className","navbar","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","right","DropdownItem","href","target","SAVE_USER_IDS","SettingsPage","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","atcoder","userIds","yukicoder","codeforces","aoj","_this2","_this$state","isSaved","Row","FormGroup","Label","Input","onChange","setState","value","type","placeholder","Button","disabled","onClick","save","React","saveUserIds","formatDate","timeSecond","d","year","getFullYear","month","getMonth","slice","date","getDate","concat","daysToSeconds","days","parseDate","dateString","parseInt","setFullYear","setMonth","setDate","getTime","ModalCard","modalSolvedDate","modalReviewDate","isModalOpen","modalType","nowSecond","_this$props","title","url","taskKey","lastJudgeAccepted","lastSolvedByUser","nextReviewTime","judge","nextReviewSuggestion","lastSolvedTimeSecond","reviewResult","currentSecond","duration","Math","max","suggestNextReviewTime","solvedDate","reviewDate","outDated","ListGroup","ListGroupItem","ListGroupItemHeading","Badge","Table","scope","style","undefined","ButtonGroup","key","Modal","isOpen","toggle","ModalHeader","ModalBody","ModalFooter","remove","solvedSecond","reviewSecond","review","CREATE_TASK","DELETE_TASK","UPDATE_TASK","tasks","submissions","problems","deleteTask","solve","nextReviewSecond","updateTask","valueSeq","sort","a","b","map","task","problem","validUrl","get","Col","components_ModalCard","TodoPage","setSuggestions","input","words","toLocaleLowerCase","filter","word","length","suggestions","index","every","indexOf","toArray","focusing","submit","isAccepted","list","find","s","result","onKeyDown","min","active","action","pill","components_TodoCards","REQUEST_LOGIN","RECEIVE_TOKEN","RECEIVE_DATA","receiveToken","clearToken","receiveData","rawData","LoginPage","activeTab","password","react_router","tabs","NavItem","NavLink","TabContent","TabPane","tabId","name","id","login","register","requestLogin","App","react_router_dom","components_NavigationBar","Container","exact","path","component","fetchAtCoderSubmissions","fetch","then","r","json","List","submission","contest_id","problemUrl","problem_id","creationTimeSecond","epoch_second","fetchAtCoderProblems","fetchCodeforcesSubmissions","from","arguments","count","payload","contestId","author","members","handle","verdict","fetchCodeforcesProblems","p","fetchAOJProblems","page","size","fetchAOJSubmissions","problemId","judgeId","language","submissionDate","fetchYukicoderProblems","No","Title","fetchYukicoderSolvedProblems","receiveProblems","receiveSubmissions","requestAndReceiveProblems","requestAndReceiveSubmissions","fns","regenerator_default","wrap","_context2","prev","next","all","f","mark","_callee","_context","sent","put","t0","stop","_marked","callers","_context4","select","c","_callee2","_context3","_marked2","BASE_URL","loginPool","method","body","stringify","syncPoolData","saved_data","refreshedToken","loadedData","loaded_data","requestAndReceiveToken","_ref","tokenString","LoginSagas_marked","saveState","saveData","convertToSaveData","localStorage","setItem","parseSaveData","savedString","tmp","Map","sendDataToPoolApi","saveDataToLocal","pullDataFromPoolApi","response","log","DataSagas_marked","LocalStorage","DataSagas_marked2","newToken","_marked3","syncSubmissions","backupLocal","backupRemote","backupRemoteOnce","rootSaga","takeLatest","sagas_marked","sagas_marked2","sagas_marked3","_context5","_marked4","_context6","take","_marked5","_context7","_marked6","isValidUrl","URL","_unused","initialize","savedData","item","getItem","objectSpread","tasksReducer","createdAt","generateTask","has","set","updated","parsedData","merge","userIdsReducer","problemsReducer","submissionsReducer","receivedMap","reduce","update","push","mergeWith","oldList","newList","tokenReducer","rootReducer","sagaMiddleware","createSagaMiddleware","store","createStore","compose","applyMiddleware","run","ReactDOM","render","react_default","createElement","es","pages_App","document","getElementById"],"mappings":"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","file":"static/js/main.cdfb30b1.chunk.js","sourcesContent":["export interface Token {\n  expireTimeSecond: number;\n  userId: string;\n  token: string;\n}\nexport const parseToken = (token: string): Token | undefined => {\n  try {\n    const tokens = token.split(\".\");\n    const { expire_time_second, user_id } = JSON.parse(atob(tokens[1]));\n    return { expireTimeSecond: expire_time_second, userId: user_id, token };\n  } catch (e) {\n    console.error(e);\n    return undefined;\n  }\n};\n\nexport const isValidToke = (token: Token) =>\n  token.expireTimeSecond > Date.now() / 1000;\n","import {\n  DropdownItem,\n  DropdownMenu,\n  DropdownToggle,\n  Nav,\n  Navbar,\n  NavbarBrand,\n  UncontrolledDropdown\n} from \"reactstrap\";\nimport * as React from \"react\";\nimport { NavLink as RouterLink } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { State } from \"../common\";\nimport { isValidToke, Token } from \"../common/Token\";\nimport { Dispatch } from \"redux\";\n\ninterface Props {\n  token: Token | undefined;\n}\nconst NavigationBar = (props: Props) => (\n  <Navbar color=\"light\" light expand=\"md\">\n    <NavbarBrand tag={RouterLink} to=\"/\">\n      Problem Pool\n    </NavbarBrand>\n    <Nav className=\"ml-auto\" navbar>\n      <UncontrolledDropdown nav inNavbar>\n        <DropdownToggle nav caret>\n          {props.token && isValidToke(props.token)\n            ? props.token.userId\n            : \"Settings\"}\n        </DropdownToggle>\n        <DropdownMenu right>\n          {props.token && isValidToke(props.token) ? null : (\n            <DropdownItem tag={RouterLink} to=\"./login\">\n              Login\n            </DropdownItem>\n          )}\n          <DropdownItem tag={RouterLink} to=\"./settings\">\n            User IDs\n          </DropdownItem>\n        </DropdownMenu>\n      </UncontrolledDropdown>\n      <UncontrolledDropdown nav inNavbar>\n        <DropdownToggle nav caret>\n          Links\n        </DropdownToggle>\n        <DropdownMenu right>\n          <DropdownItem\n            href=\"https://github.com/kenkoooo/problem-pool\"\n            target=\"_blank\"\n          >\n            GitHub\n          </DropdownItem>\n          <DropdownItem\n            href=\"https://onlinejudge.u-aizu.ac.jp/\"\n            target=\"_blank\"\n          >\n            AOJ\n          </DropdownItem>\n          <DropdownItem href=\"https://atcoder.jp/\" target=\"_blank\">\n            AtCoder\n          </DropdownItem>\n          <DropdownItem href=\"https://codeforces.com/\" target=\"_blank\">\n            Codeforces\n          </DropdownItem>\n          <DropdownItem href=\"https://yukicoder.me/\" target=\"_blank\">\n            yukicoder\n          </DropdownItem>\n        </DropdownMenu>\n      </UncontrolledDropdown>\n    </Nav>\n  </Navbar>\n);\n\nconst mapStateToProps = (state: State) => ({\n  token: state.token\n});\nconst mapDispatchToProps = (dispatch: Dispatch) => ({});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(NavigationBar);\n","import { UserIds } from \"../common\";\n\nexport const SAVE_USER_IDS = \"SAVE_USER_IDS\";\n\nexport const saveUserIds = (userIds: UserIds) => ({\n  type: SAVE_USER_IDS as typeof SAVE_USER_IDS,\n  userIds\n});\n\nexport type ConfigActionType = ReturnType<typeof saveUserIds>;\n","import { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport * as React from \"react\";\nimport { Button, FormGroup, Input, Label, Row } from \"reactstrap\";\nimport { State, UserIds } from \"../common\";\nimport { saveUserIds } from \"../actions/ConfigActions\";\n\ninterface Props {\n  readonly save: (userIds: UserIds) => void;\n  readonly userIds: UserIds;\n}\n\ninterface LocalState {\n  atcoder: string;\n  codeforces: string;\n  yukicoder: string;\n  aoj: string;\n}\n\nclass SettingsPage extends React.Component<Props, LocalState> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      atcoder: props.userIds.atcoder,\n      yukicoder: props.userIds.yukicoder,\n      codeforces: props.userIds.codeforces,\n      aoj: props.userIds.aoj\n    };\n  }\n\n  render() {\n    const { atcoder, codeforces, yukicoder, aoj } = this.state;\n    const isSaved =\n      atcoder === this.props.userIds.atcoder &&\n      codeforces === this.props.userIds.codeforces &&\n      yukicoder === this.props.userIds.yukicoder &&\n      aoj === this.props.userIds.aoj;\n    return (\n      <div>\n        <Row>\n          <FormGroup>\n            <Label>AtCoder ID</Label>\n            <Input\n              onChange={e => this.setState({ atcoder: e.target.value })}\n              type=\"text\"\n              placeholder=\"AtCoder ID\"\n              value={atcoder}\n            />\n          </FormGroup>\n        </Row>\n        <Row>\n          <FormGroup>\n            <Label>AOJ ID</Label>\n            <Input\n              onChange={e => this.setState({ aoj: e.target.value })}\n              type=\"text\"\n              placeholder=\"AOJ ID\"\n              value={aoj}\n            />\n          </FormGroup>\n        </Row>\n        <Row>\n          <FormGroup>\n            <Label>yukicoder ID</Label>\n            <Input\n              onChange={e => this.setState({ yukicoder: e.target.value })}\n              type=\"text\"\n              placeholder=\"yukicoder ID\"\n              value={yukicoder}\n            />\n          </FormGroup>\n        </Row>\n        <Row>\n          <FormGroup>\n            <Label>Codeforces ID</Label>\n            <Input\n              onChange={e => this.setState({ codeforces: e.target.value })}\n              type=\"text\"\n              placeholder=\"Codeforces ID\"\n              value={codeforces}\n            />\n          </FormGroup>\n        </Row>\n        <Row>\n          {isSaved ? (\n            <Button disabled>Saved</Button>\n          ) : (\n            <Button\n              color=\"danger\"\n              onClick={() =>\n                this.props.save({ atcoder, codeforces, yukicoder, aoj })\n              }\n            >\n              Save\n            </Button>\n          )}\n        </Row>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: State) => ({\n  userIds: state.userIds\n});\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  save: (userIds: UserIds) => dispatch(saveUserIds(userIds))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SettingsPage);\n","import { List, Map } from \"immutable\";\nimport { Problem, Submission } from \"../api\";\nimport { PooledTask } from \"./PooledTask\";\nimport { Token } from \"./Token\";\n\nexport type OnlineJudge = \"AtCoder\" | \"Codeforces\" | \"yukicoder\" | \"AOJ\";\n\nexport interface UserIds {\n  readonly atcoder: string;\n  readonly codeforces: string;\n  readonly aoj: string;\n  readonly yukicoder: string;\n}\n\nexport interface State {\n  readonly tasks: Map<string, PooledTask>;\n  readonly userIds: UserIds;\n  readonly submissions: Map<string, List<Submission>>;\n  readonly problems: Map<string, Problem>;\n  readonly token: Token | undefined;\n}\n\nexport const formatDate = (timeSecond: number) => {\n  const d = new Date(timeSecond * 1000);\n  const year = d.getFullYear();\n  const month = (\"0\" + (d.getMonth() + 1)).slice(-2);\n  const date = (\"0\" + d.getDate()).slice(-2);\n  return `${year}-${month}-${date}`;\n};\n","export type ReviewResult = \"Solved\" | \"Good\" | \"Hard\" | \"Failed\";\n\nconst daysToSeconds = (days: number) => days * 24 * 3600;\n\nexport const suggestNextReviewTime = (\n  lastSolvedTimeSecond: number | undefined,\n  reviewResult: ReviewResult\n) => {\n  const currentSecond = Date.now() / 1000;\n  const duration = lastSolvedTimeSecond\n    ? currentSecond - lastSolvedTimeSecond\n    : 0;\n  switch (reviewResult) {\n    case \"Solved\":\n      return Math.max(duration * 2, daysToSeconds(4)) + currentSecond;\n    case \"Good\":\n      return Math.max(duration, daysToSeconds(4)) + currentSecond;\n    case \"Hard\":\n      return Math.max(duration / 2, daysToSeconds(4)) + currentSecond;\n    case \"Failed\":\n      return daysToSeconds(4) + currentSecond;\n  }\n};\n","import * as React from \"react\";\nimport {\n  Badge,\n  Button,\n  ButtonGroup,\n  FormGroup,\n  Input,\n  Label,\n  ListGroup,\n  ListGroupItem,\n  ListGroupItemHeading,\n  Modal,\n  ModalBody,\n  ModalFooter,\n  ModalHeader,\n  Table\n} from \"reactstrap\";\nimport { formatDate, OnlineJudge } from \"../common\";\nimport { ReviewResult, suggestNextReviewTime } from \"../common/Reviewer\";\n\ninterface Props {\n  taskKey: string;\n  url: string | undefined;\n  title: string | null;\n  lastJudgeAccepted: number | undefined;\n  lastSolvedByUser: number | undefined;\n  nextReviewTime: number;\n  judge: OnlineJudge | null;\n  remove: () => void;\n  review: (solvedDate: number, reviewDate: number) => void;\n}\n\ninterface LocalState {\n  isModalOpen: boolean;\n  modalSolvedDate: string | null;\n  modalReviewDate: string | null;\n  modalType: ReviewResult | \"Remove\";\n}\n\nconst parseDate = (dateString: string) => {\n  const year = parseInt(dateString.slice(0, 4));\n  const month = parseInt(dateString.slice(5, 7));\n  const date = parseInt(dateString.slice(8, 10));\n  const d = new Date();\n  d.setFullYear(year);\n  d.setMonth(month - 1);\n  d.setDate(date);\n  return d.getTime() / 1000;\n};\n\nclass ModalCard extends React.Component<Props, LocalState> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      modalSolvedDate: null,\n      modalReviewDate: null,\n      isModalOpen: false,\n      modalType: \"Remove\"\n    };\n  }\n  render() {\n    const {\n      isModalOpen,\n      modalType,\n      modalSolvedDate,\n      modalReviewDate\n    } = this.state;\n    const nowSecond = Date.now() / 1000;\n    const {\n      title,\n      url,\n      taskKey,\n      lastJudgeAccepted,\n      lastSolvedByUser,\n      nextReviewTime,\n      judge\n    } = this.props;\n    const nextReviewSuggestion =\n      modalType !== \"Remove\"\n        ? suggestNextReviewTime(lastSolvedByUser, modalType)\n        : -1;\n    const solvedDate =\n      modalSolvedDate !== null ? modalSolvedDate : formatDate(nowSecond);\n    const reviewDate =\n      modalReviewDate !== null\n        ? modalReviewDate\n        : formatDate(nextReviewSuggestion);\n    const outDated = formatDate(nowSecond) >= formatDate(nextReviewTime);\n    return (\n      <ListGroup>\n        <ListGroupItem>\n          <ListGroupItemHeading>\n            {title && url && judge ? (\n              <div>\n                <Badge>{judge}</Badge>{\" \"}\n                <a href={url} target=\"_blank\">\n                  {title}\n                </a>\n              </div>\n            ) : (\n              taskKey\n            )}\n          </ListGroupItemHeading>\n          <Table>\n            <tbody>\n              {\n                <tr>\n                  <th scope=\"row\">Next review</th>\n                  {outDated ? (\n                    <td style={{ color: \"red\" }}>\n                      <strong> {formatDate(nextReviewTime)}</strong>\n                    </td>\n                  ) : (\n                    <td>{formatDate(nextReviewTime)}</td>\n                  )}\n                </tr>\n              }\n              {lastSolvedByUser !== undefined ? (\n                <tr>\n                  <th scope=\"row\">Last solved</th>\n                  <td>{formatDate(lastSolvedByUser)}</td>\n                </tr>\n              ) : null}\n              {lastJudgeAccepted !== undefined ? (\n                <tr>\n                  <th scope=\"row\">Last accepted</th>\n                  <td>{formatDate(lastJudgeAccepted)}</td>\n                </tr>\n              ) : null}\n            </tbody>\n          </Table>\n\n          <ButtonGroup className=\"d-flex justify-content-end\">\n            <Button\n              key=\"solved\"\n              color=\"success\"\n              onClick={() =>\n                this.setState({\n                  isModalOpen: true,\n                  modalType: \"Solved\"\n                })\n              }\n            >\n              Solved\n            </Button>\n            <Button\n              key=\"good\"\n              onClick={() =>\n                this.setState({\n                  isModalOpen: true,\n                  modalType: \"Good\"\n                })\n              }\n            >\n              Good\n            </Button>\n            <Button\n              key=\"hard\"\n              color=\"warning\"\n              onClick={() =>\n                this.setState({\n                  isModalOpen: true,\n                  modalType: \"Hard\"\n                })\n              }\n            >\n              Hard\n            </Button>\n            <Button\n              key=\"failed\"\n              color=\"danger\"\n              onClick={() =>\n                this.setState({\n                  isModalOpen: true,\n                  modalType: \"Failed\"\n                })\n              }\n            >\n              Failed\n            </Button>\n            <Button\n              key=\"remove\"\n              color=\"dark\"\n              onClick={() =>\n                this.setState({\n                  isModalOpen: true,\n                  modalType: \"Remove\"\n                })\n              }\n            >\n              Remove\n            </Button>\n          </ButtonGroup>\n          <Modal\n            isOpen={isModalOpen}\n            toggle={() => this.setState({ isModalOpen: !isModalOpen })}\n          >\n            {modalType === \"Remove\" ? (\n              <div>\n                <ModalHeader>Remove this card?</ModalHeader>\n                <ModalBody>{title ? title : taskKey}</ModalBody>\n                <ModalFooter>\n                  <Button\n                    onClick={() => {\n                      this.setState({ isModalOpen: false });\n                      this.props.remove();\n                    }}\n                  >\n                    Remove\n                  </Button>\n                  <Button onClick={() => this.setState({ isModalOpen: false })}>\n                    Cancel\n                  </Button>\n                </ModalFooter>\n              </div>\n            ) : (\n              <div>\n                <ModalHeader>Next review will be ...</ModalHeader>\n                <ModalBody>\n                  <FormGroup>\n                    <Label>Solved:</Label>\n                    <Input\n                      type=\"date\"\n                      value={solvedDate}\n                      onChange={e =>\n                        this.setState({ modalSolvedDate: e.target.value })\n                      }\n                    />\n                  </FormGroup>\n                  <Label>Next Review:</Label>\n                  <Input\n                    type=\"date\"\n                    value={reviewDate}\n                    onChange={e =>\n                      this.setState({ modalReviewDate: e.target.value })\n                    }\n                  />\n                </ModalBody>\n                <ModalFooter>\n                  <Button\n                    onClick={() => {\n                      this.setState({ isModalOpen: false });\n                      const solvedSecond = parseDate(solvedDate);\n                      const reviewSecond = parseDate(reviewDate);\n                      this.props.review(solvedSecond, reviewSecond);\n                    }}\n                  >\n                    Submit\n                  </Button>\n                  <Button onClick={() => this.setState({ isModalOpen: false })}>\n                    Cancel\n                  </Button>\n                </ModalFooter>\n              </div>\n            )}\n          </Modal>\n        </ListGroupItem>\n      </ListGroup>\n    );\n  }\n}\n\nexport default ModalCard;\n","export const CREATE_TASK = \"CREATE_TASK\";\nexport const DELETE_TASK = \"DELETE_TASK\";\nexport const UPDATE_TASK = \"UPDATE_TASK\";\n\nexport const createTask = (input: string) => ({\n  type: CREATE_TASK as typeof CREATE_TASK,\n  input\n});\n\nexport const deleteTask = (key: string) => ({\n  type: DELETE_TASK as typeof DELETE_TASK,\n  key\n});\n\nexport const updateTask = (\n  key: string,\n  solvedSecond: number,\n  nextReviewSecond: number\n) => ({\n  type: UPDATE_TASK as typeof UPDATE_TASK,\n  key,\n  solvedSecond,\n  nextReviewSecond\n});\nexport type TaskActionType =\n  | ReturnType<typeof createTask>\n  | ReturnType<typeof deleteTask>\n  | ReturnType<typeof updateTask>;\n","import * as React from \"react\";\nimport { Dispatch } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { List, Map } from \"immutable\";\nimport { PooledTask } from \"../common/PooledTask\";\nimport { State } from \"../common\";\nimport { Col, Row } from \"reactstrap\";\nimport { Problem, Submission } from \"../api\";\nimport ModalCard from \"./ModalCard\";\nimport { deleteTask, updateTask } from \"../actions/TaskActions\";\n\ninterface Props {\n  tasks: Map<string, PooledTask>;\n  submissions: Map<string, List<Submission>>;\n  problems: Map<string, Problem>;\n  remove: (key: string) => void;\n  solve: (key: string, solvedSecond: number, reviewSecond: number) => void;\n}\nconst TodoCards = (props: Props) => (\n  <div>\n    {props.tasks\n      .valueSeq()\n      .sort((a, b) => a.nextReviewTime - b.nextReviewTime)\n      .map(task => {\n        const problem = task.validUrl\n          ? props.problems.get(task.validUrl)\n          : undefined;\n        const { lastJudgeAccepted, lastSolvedByUser, nextReviewTime } = task;\n        return (\n          <Row key={task.key}>\n            <Col>\n              <ModalCard\n                taskKey={task.key}\n                url={task.validUrl}\n                title={problem ? problem.title : null}\n                lastJudgeAccepted={lastJudgeAccepted}\n                lastSolvedByUser={lastSolvedByUser}\n                nextReviewTime={nextReviewTime}\n                remove={() => props.remove(task.key)}\n                review={(solvedDate: number, reviewDate: number) =>\n                  props.solve(task.key, solvedDate, reviewDate)\n                }\n                judge={problem ? problem.judge : null}\n              />\n            </Col>\n          </Row>\n        );\n      })}\n  </div>\n);\n\nconst mapStateToProps = (state: State) => ({\n  tasks: state.tasks,\n  submissions: state.submissions,\n  problems: state.problems\n});\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  remove: (key: string) => dispatch(deleteTask(key)),\n  solve: (key: string, solvedSecond: number, reviewSecond: number) =>\n    dispatch(updateTask(key, solvedSecond, reviewSecond))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TodoCards);\n","import { connect } from \"react-redux\";\nimport { Badge, Col, Input, ListGroup, ListGroupItem, Row } from \"reactstrap\";\nimport * as React from \"react\";\nimport { Dispatch } from \"redux\";\nimport { List, Map } from \"immutable\";\nimport { Problem, Submission } from \"../api\";\nimport { State } from \"../common\";\nimport TodoCards from \"../components/TodoCards\";\nimport { createTask } from \"../actions/TaskActions\";\n\ninterface Props {\n  readonly submit: (problem: string) => void;\n  readonly problems: Map<string, Problem>;\n  readonly submissions: Map<string, List<Submission>>;\n}\n\ninterface LocalState {\n  input: string;\n  suggestions: Problem[];\n  focusing: number;\n}\n\nclass TodoPage extends React.Component<Props, LocalState> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      input: \"\",\n      suggestions: [],\n      focusing: -1\n    };\n  }\n\n  setSuggestions = (input: string) => {\n    const words = input\n      .toLocaleLowerCase()\n      .split(\" \")\n      .filter(word => word.length > 0);\n    if (words.length > 0) {\n      const suggestions = this.props.problems\n        .valueSeq()\n        .filter(problem => {\n          const index = (\n            problem.title +\n            \" \" +\n            problem.url +\n            \" \" +\n            problem.judge\n          ).toLocaleLowerCase();\n          return words.every(word => index.indexOf(word) !== -1);\n        })\n        .slice(0, 10)\n        .toArray();\n      this.setState({ suggestions, focusing: -1 });\n    } else {\n      this.setState({ suggestions: [], focusing: -1 });\n    }\n  };\n\n  submit = (key: string) => {\n    this.props.submit(key);\n    this.setState({\n      input: \"\",\n      suggestions: [],\n      focusing: -1\n    });\n  };\n\n  render() {\n    const { suggestions, focusing } = this.state;\n    const { submissions } = this.props;\n    const isAccepted = (problem: Problem) => {\n      const list = submissions.get(problem.url);\n      return (\n        list !== undefined &&\n        list.find(s => s.result === \"Accepted\") !== undefined\n      );\n    };\n\n    return (\n      <div>\n        <Row>\n          <Col>\n            <Input\n              onKeyDown={e => {\n                if (e.key === \"Enter\") {\n                  if (0 <= focusing && focusing < suggestions.length) {\n                    this.submit(suggestions[focusing].url);\n                  } else {\n                    this.submit(this.state.input);\n                  }\n                } else if (e.key === \"ArrowDown\") {\n                  this.setState({\n                    focusing: Math.min(focusing + 1, suggestions.length - 1)\n                  });\n                } else if (e.key === \"ArrowUp\") {\n                  this.setState({\n                    focusing: Math.max(focusing - 1, -1)\n                  });\n                }\n              }}\n              type=\"text\"\n              onChange={e => {\n                const input = e.target.value;\n                this.setState({ input });\n                this.setSuggestions(input);\n              }}\n              value={this.state.input}\n            />\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <ListGroup>\n              {this.state.suggestions.map((problem, index) => (\n                <ListGroupItem\n                  color={isAccepted(problem) ? \"success\" : undefined}\n                  active={index === focusing}\n                  key={problem.url}\n                  onClick={() => this.submit(problem.url)}\n                  action\n                >\n                  {problem.title} <Badge pill>{problem.judge}</Badge>\n                </ListGroupItem>\n              ))}\n            </ListGroup>\n          </Col>\n        </Row>\n        <TodoCards />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: State) => ({\n  problems: state.problems,\n  submissions: state.submissions\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  submit: (problem: string) => dispatch(createTask(problem))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TodoPage);\n","import { Token } from \"../common/Token\";\n\nexport const REQUEST_LOGIN = \"REQUEST_LOGIN\";\nexport const RECEIVE_TOKEN = \"RECEIVE_TOKEN\";\nexport const CLEAR_TOKEN = \"CLEAR_TOKEN\";\n\nexport const RECEIVE_DATA = \"RECEIVE_DATA\";\n\nexport const requestLogin = (\n  userId: string,\n  password: string,\n  register: boolean\n) => ({\n  type: REQUEST_LOGIN as typeof REQUEST_LOGIN,\n  userId,\n  password,\n  register\n});\n\nexport const receiveToken = (token: Token) => ({\n  type: RECEIVE_TOKEN as typeof RECEIVE_TOKEN,\n  token\n});\n\nexport const clearToken = () => ({\n  type: CLEAR_TOKEN as typeof CLEAR_TOKEN\n});\n\nexport const receiveData = (rawData: string) => ({\n  type: RECEIVE_DATA as typeof RECEIVE_DATA,\n  rawData\n});\n\nexport type PoolApiActionType =\n  | ReturnType<typeof requestLogin>\n  | ReturnType<typeof receiveToken>\n  | ReturnType<typeof clearToken>\n  | ReturnType<typeof receiveData>;\n","import { connect } from \"react-redux\";\nimport * as React from \"react\";\nimport {\n  Button,\n  Col,\n  FormGroup,\n  Input,\n  Label,\n  Nav,\n  NavItem,\n  NavLink,\n  Row,\n  TabContent,\n  TabPane\n} from \"reactstrap\";\nimport { State } from \"../common\";\nimport { Dispatch } from \"redux\";\nimport { Redirect } from \"react-router\";\nimport { Token } from \"../common/Token\";\nimport { requestLogin } from \"../actions/PoolApiActions\";\n\ninterface Props {\n  login: (userId: string, password: string, register: boolean) => void;\n  token: Token | undefined;\n}\ninterface LocalState {\n  activeTab: \"Login\" | \"Register\";\n  userId: string;\n  password: string;\n}\nclass LoginPage extends React.Component<Props, LocalState> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { activeTab: \"Login\", userId: \"\", password: \"\" };\n  }\n  render() {\n    const { activeTab, userId, password } = this.state;\n    return (\n      <React.Fragment>\n        {this.props.token ? <Redirect to=\"/\" /> : null}\n        <Nav tabs>\n          <NavItem>\n            <NavLink\n              active={activeTab === \"Register\"}\n              onClick={() => this.setState({ activeTab: \"Register\" })}\n            >\n              Register\n            </NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink\n              active={activeTab === \"Login\"}\n              onClick={() => this.setState({ activeTab: \"Login\" })}\n            >\n              Login\n            </NavLink>\n          </NavItem>\n        </Nav>\n        <TabContent activeTab={1}>\n          <TabPane tabId={1}>\n            <Row>\n              <Col>\n                <FormGroup>\n                  <Label>User ID</Label>\n                  <Input\n                    type=\"text\"\n                    name=\"user_id\"\n                    id=\"user_id\"\n                    onChange={e => this.setState({ userId: e.target.value })}\n                    value={userId}\n                  />\n                </FormGroup>\n                <FormGroup>\n                  <Label>Password</Label>\n                  <Input\n                    type=\"password\"\n                    name=\"password\"\n                    id=\"password\"\n                    onChange={e => this.setState({ password: e.target.value })}\n                    value={password}\n                  />\n                  <Button\n                    onClick={() =>\n                      this.props.login(\n                        userId,\n                        password,\n                        activeTab === \"Register\"\n                      )\n                    }\n                  >\n                    {activeTab}\n                  </Button>\n                </FormGroup>\n              </Col>\n            </Row>\n          </TabPane>\n        </TabContent>\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = (state: State) => ({ token: state.token });\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  login: (userId: string, password: string, register: boolean) =>\n    dispatch(requestLogin(userId, password, register))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(LoginPage);\n","import { HashRouter, Route, Switch } from \"react-router-dom\";\nimport NavigationBar from \"../components/NavigationBar\";\nimport * as React from \"react\";\nimport { Container } from \"reactstrap\";\nimport SettingsPage from \"./SettingsPage\";\nimport TodoPage from \"./TodoPage\";\nimport LoginPage from \"./LoginPage\";\n\nconst App = () => (\n  <HashRouter>\n    <NavigationBar />\n    <Container>\n      <Switch>\n        <Route>\n          <Route exact path=\"/\" component={TodoPage} />\n          <Route exact path=\"/settings\" component={SettingsPage} />\n          <Route exact path=\"/login\" component={LoginPage} />\n        </Route>\n      </Switch>\n    </Container>\n  </HashRouter>\n);\n\nexport default App;\n","import { Problem, Submission } from \"./index\";\nimport { List } from \"immutable\";\n\nexport const fetchAtCoderSubmissions = (userId: string) =>\n  fetch(`https://kenkoooo.com/atcoder/atcoder-api/results?user=${userId}`)\n    .then(r => r.json())\n    .then(\n      (submissions: AtCoderSubmission[]): List<Submission> =>\n        List(\n          submissions.map(submission => ({\n            url: `https://atcoder.jp/contests/${submission.contest_id}/submissions/${submission.id}`,\n            userId: submission.user_id,\n            result: submission.result === \"AC\" ? \"Accepted\" : \"Rejected\",\n            problemUrl: `https://atcoder.jp/contests/${submission.contest_id}/tasks/${submission.problem_id}`,\n            creationTimeSecond: submission.epoch_second\n          }))\n        )\n    );\nexport const fetchAtCoderProblems = () =>\n  fetch(\"https://kenkoooo.com/atcoder/resources/problems.json\")\n    .then(r => r.json())\n    .then(\n      (problems: AtCoderProblem[]): List<Problem> =>\n        List(\n          problems.map(problem => ({\n            url: `https://atcoder.jp/contests/${problem.contest_id}/tasks/${problem.id}`,\n            title: problem.title,\n            judge: \"AtCoder\"\n          }))\n        )\n    );\n\ninterface AtCoderSubmission {\n  id: number;\n  epoch_second: number;\n  problem_id: string;\n  contest_id: string;\n  user_id: string;\n  result: string;\n}\n\ninterface AtCoderProblem {\n  title: string;\n  contest_id: string;\n  id: string;\n}\n","import { Problem, Submission } from \"./index\";\nimport { List } from \"immutable\";\n\nexport const fetchCodeforcesSubmissions = (\n  userId: string,\n  from: number = 1,\n  count: number = 100000\n) =>\n  fetch(\n    `https://codeforces.com/api/user.status?handle=${userId}&from=${from}&count=${count}`\n  )\n    .then(r => r.json())\n    .then(\n      (payload: {\n        result: {\n          id: number;\n          creationTimeSecond: number;\n          problem: {\n            contestId: number;\n            index: string;\n            name: string;\n          };\n          author: {\n            members: { handle: string }[];\n          };\n          programmingLanguage: string;\n          verdict: string;\n        }[];\n      }): List<Submission> =>\n        List(\n          payload.result.map(s => ({\n            url: `https://codeforces.com/contest/${s.problem.contestId}/submission/${s.id}`,\n            userId: s.author.members[0].handle,\n            result: s.verdict === \"OK\" ? \"Accepted\" : \"Rejected\",\n            problemUrl: `https://codeforces.com/contest/${s.problem.contestId}/problem/${s.problem.index}`,\n            creationTimeSecond: s.creationTimeSecond\n          }))\n        )\n    );\n\nexport const fetchCodeforcesProblems = () =>\n  fetch(\"https://codeforces.com/api/problemset.problems\")\n    .then(r => r.json())\n    .then(\n      (payload: {\n        result: {\n          problems: {\n            contestId: number;\n            index: string;\n            name: string;\n            points: number | undefined;\n          }[];\n        };\n      }): List<Problem> =>\n        List(\n          payload.result.problems.map(p => ({\n            url: `https://codeforces.com/contest/${p.contestId}/problem/${p.index}`,\n            title: p.name,\n            judge: \"Codeforces\"\n          }))\n        )\n    );\n","import { List } from \"immutable\";\nimport { Problem, Submission } from \"./index\";\n\nexport const fetchAOJProblems = (page: number = 0, size: number = 10000) =>\n  fetch(`https://judgeapi.u-aizu.ac.jp/problems?page=${page}&size=${size}`)\n    .then(r => r.json())\n    .then(\n      (\n        problems: {\n          id: string;\n          name: string;\n        }[]\n      ): List<Problem> =>\n        List(\n          problems.map(problem => ({\n            url: `https://onlinejudge.u-aizu.ac.jp/problems/${problem.id}`,\n            title: `${problem.id}: ${problem.name}`,\n            judge: \"AOJ\"\n          }))\n        )\n    );\n\nexport const fetchAOJSubmissions = (\n  userId: string,\n  page: number = 0,\n  size: number = 100000\n) =>\n  fetch(\n    `https://judgeapi.u-aizu.ac.jp/solutions/users/${userId}?page=${page}&size=${size}`\n  )\n    .then(r => r.json())\n    .then(\n      (\n        submissions: {\n          judgeId: number;\n          submissionDate: number;\n          userId: string;\n          problemId: string;\n          language: string;\n        }[]\n      ): List<Submission> =>\n        List(\n          submissions.map(submission => ({\n            url: `https://onlinejudge.u-aizu.ac.jp/solutions/problem/${submission.problemId}/review/${submission.judgeId}/${submission.userId}/${submission.language}`,\n            problemUrl: `https://onlinejudge.u-aizu.ac.jp/problems/${submission.problemId}`,\n            userId: submission.userId,\n            result: \"Accepted\",\n            creationTimeSecond: submission.submissionDate / 1000\n          }))\n        )\n    );\n","import { List } from \"immutable\";\nimport { Problem, Submission } from \"./index\";\n\nexport const fetchYukicoderProblems = () =>\n  fetch(\"https://yukicoder.me/api/v1/problems\")\n    .then(r => r.json())\n    .then(\n      (\n        problems: { No: number; ProblemId: number; Title: string }[]\n      ): List<Problem> =>\n        List(\n          problems.map(problem => ({\n            url: `https://yukicoder.me/problems/no/${problem.No}`,\n            title: `No.${problem.No} ${problem.Title}`,\n            judge: \"yukicoder\"\n          }))\n        )\n    );\n\nexport const fetchYukicoderSolvedProblems = (userId: string) =>\n  fetch(`https://yukicoder.me/api/v1/solved/name/${userId}`)\n    .then(r => r.json())\n    .then(\n      (\n        problems: { No: number; ProblemId: number; Title: string }[]\n      ): List<Submission> =>\n        List(\n          problems.map(problem => ({\n            url: `https://yukicoder.me/problems/no/${problem.No}`,\n            userId: userId,\n            result: \"Accepted\",\n            problemUrl: `https://yukicoder.me/problems/no/${problem.No}`,\n            creationTimeSecond: undefined\n          }))\n        )\n    );\n","import { OnlineJudge } from \"../common\";\nimport { List } from \"immutable\";\nimport { Problem, Submission } from \"../api\";\n\nexport const RECEIVE_PROBLEMS = \"RECEIVE_PROBLEMS\";\nexport const REQUEST_SUBMISSIONS = \"REQUEST_SUBMISSIONS\";\nexport const RECEIVE_SUBMISSIONS = \"RECEIVE_SUBMISSIONS\";\n\nexport const receiveProblems = (problems: List<Problem>) => ({\n  type: RECEIVE_PROBLEMS as typeof RECEIVE_PROBLEMS,\n  problems\n});\n\nexport const requestSubmissions = (userId: string, judge: OnlineJudge) => ({\n  type: REQUEST_SUBMISSIONS as typeof REQUEST_SUBMISSIONS,\n  judge,\n  userId\n});\n\nexport const receiveSubmissions = (submissions: List<Submission>) => ({\n  type: RECEIVE_SUBMISSIONS as typeof RECEIVE_SUBMISSIONS,\n  submissions\n});\n\nexport type ExternalApiActionType =\n  | ReturnType<typeof receiveProblems>\n  | ReturnType<typeof requestSubmissions>\n  | ReturnType<typeof receiveSubmissions>;\n","import { fetchAtCoderProblems, fetchAtCoderSubmissions } from \"../api/AtCoder\";\nimport {\n  fetchCodeforcesProblems,\n  fetchCodeforcesSubmissions\n} from \"../api/Codeforces\";\nimport { fetchAOJProblems, fetchAOJSubmissions } from \"../api/AOJ\";\nimport {\n  fetchYukicoderProblems,\n  fetchYukicoderSolvedProblems\n} from \"../api/Yukicoder\";\nimport { all, call, put, select } from \"redux-saga/effects\";\nimport {\n  receiveProblems,\n  receiveSubmissions\n} from \"../actions/ExternalApiActions\";\nimport { State } from \"../common\";\n\nexport function* requestAndReceiveProblems() {\n  const fns = [\n    fetchAtCoderProblems,\n    fetchCodeforcesProblems,\n    fetchAOJProblems,\n    fetchYukicoderProblems\n  ];\n  yield all(\n    fns.map(f =>\n      call(function*() {\n        try {\n          const problems = yield call(f);\n          yield put(receiveProblems(problems));\n        } catch (e) {\n          console.error(\"Failed to fetch problems. \" + e);\n        }\n      })\n    )\n  );\n}\n\nexport function* requestAndReceiveSubmissions() {\n  const userIds = yield select((state: State) => state.userIds);\n  const callers = [\n    { f: fetchAtCoderSubmissions, id: userIds.atcoder },\n    { f: fetchCodeforcesSubmissions, id: userIds.codeforces },\n    { f: fetchAOJSubmissions, id: userIds.aoj },\n    { f: fetchYukicoderSolvedProblems, id: userIds.yukicoder }\n  ];\n  yield all(\n    callers\n      .filter(c => c.id.length > 0)\n      .map(c =>\n        call(function*() {\n          try {\n            const submissions = yield call(c.f, c.id);\n            yield put(receiveSubmissions(submissions));\n          } catch (e) {\n            console.error(\"Failed to fetch submissions. \" + e);\n          }\n        })\n      )\n  );\n}\n","const BASE_URL = \"https://pool-api.kenkoooo.com/v1\";\n\nexport const loginPool = (\n  userId: string,\n  password: string,\n  register: boolean\n) =>\n  fetch(BASE_URL + \"/login\", {\n    method: \"POST\",\n    body: JSON.stringify({ user_id: userId, password, register })\n  })\n    .then(r => r.json())\n    .then(r => r as LoginResponse);\n\nexport interface LoginResponse {\n  readonly token: string;\n}\n\nexport const syncPoolData = (token: string, saved_data: string | undefined) => {\n  const body = JSON.stringify({ token, saved_data });\n  return fetch(BASE_URL + \"/sync\", {\n    method: \"POST\",\n    body\n  })\n    .then(r => r.json())\n    .then(\n      (r: {\n        token: string;\n        loaded_data: string | undefined;\n      }): SyncResponse => ({\n        refreshedToken: r.token,\n        loadedData: r.loaded_data\n      })\n    );\n};\n\nexport interface SyncResponse {\n  readonly refreshedToken: string;\n  readonly loadedData: string | undefined;\n}\n","import Action from \"../actions\";\nimport { receiveToken, REQUEST_LOGIN } from \"../actions/PoolApiActions\";\nimport { call, put } from \"@redux-saga/core/effects\";\nimport { loginPool } from \"../pool-api\";\nimport { parseToken } from \"../common/Token\";\n\nexport function* requestAndReceiveToken(action: Action) {\n  if (action.type === REQUEST_LOGIN) {\n    const { userId, password, register } = action;\n    const { token: tokenString } = yield call(\n      loginPool,\n      userId,\n      password,\n      register\n    );\n    const token = parseToken(tokenString);\n    if (token !== undefined) {\n      yield put(receiveToken(token));\n    }\n  }\n}\n","import { State, UserIds } from \"./index\";\nimport { Map } from \"immutable\";\nimport { PooledTask } from \"./PooledTask\";\nimport { Token } from \"./Token\";\n\nconst LOCAL_STORAGE_KEY = \"SAVE_DATA\";\n\nexport const saveState = (state: State) => {\n  const saveData = convertToSaveData(state);\n  localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(saveData));\n};\nexport const getSaveData = (): SaveData | undefined => {\n  const item = localStorage.getItem(LOCAL_STORAGE_KEY);\n  if (item === null) {\n    return undefined;\n  } else {\n    return parseSaveData(item);\n  }\n};\n\nexport const parseSaveData = (savedString: string): SaveData | undefined => {\n  try {\n    const tmp = JSON.parse(savedString);\n    return {\n      userIds: tmp.userIds,\n      tasks: Map(tmp.tasks),\n      token: tmp.token\n    };\n  } catch (e) {\n    console.error(e);\n    return undefined;\n  }\n};\n\nexport interface SaveData {\n  readonly tasks: Map<string, PooledTask>;\n  readonly userIds: UserIds;\n  readonly token: Token | undefined;\n}\n\nexport const convertToSaveData = ({\n  tasks,\n  userIds,\n  token\n}: State): SaveData => ({\n  tasks,\n  userIds,\n  token\n});\n","import { select, call, put } from \"redux-saga/effects\";\nimport {\n  clearToken,\n  receiveData,\n  receiveToken\n} from \"../actions/PoolApiActions\";\nimport { syncPoolData, SyncResponse } from \"../pool-api\";\nimport { parseToken } from \"../common/Token\";\nimport { State } from \"../common\";\nimport { convertToSaveData } from \"../common/LocalStorage\";\nimport * as LocalStorage from \"../common/LocalStorage\";\n\nexport function* sendDataToPoolApi() {\n  console.log(\"About to send data...\");\n  const saveData = yield select((state: State) => convertToSaveData(state));\n\n  if (saveData.token !== undefined) {\n    try {\n      const response = yield call(\n        syncPoolData,\n        saveData.token.token,\n        JSON.stringify(saveData)\n      );\n      const refreshedToken = parseToken(response.refreshedToken);\n      if (refreshedToken !== undefined) {\n        yield put(receiveToken(refreshedToken));\n      } else {\n        yield put(clearToken());\n      }\n    } catch (e) {\n      yield put(clearToken());\n    }\n  } else {\n    yield put(clearToken());\n  }\n}\n\nexport function* saveDataToLocal() {\n  const state = yield select((state: State) => state);\n  yield call(LocalStorage.saveState, state);\n}\n\nexport function* pullDataFromPoolApi() {\n  const token = yield select((state: State) => state.token);\n  if (token !== undefined) {\n    try {\n      const response: SyncResponse = yield call(\n        syncPoolData,\n        token.token,\n        undefined\n      );\n\n      const newToken = parseToken(response.refreshedToken);\n      if (newToken !== undefined) {\n        yield put(receiveToken(newToken));\n      }\n      if (response.loadedData !== undefined) {\n        yield put(receiveData(response.loadedData));\n      }\n    } catch (e) {\n      console.error(e);\n      yield put(clearToken());\n    }\n  }\n}\n","import { all, call, takeLatest, take } from \"redux-saga/effects\";\nimport { SAVE_USER_IDS } from \"../actions/ConfigActions\";\nimport {\n  RECEIVE_DATA,\n  RECEIVE_TOKEN,\n  REQUEST_LOGIN\n} from \"../actions/PoolApiActions\";\nimport {\n  requestAndReceiveProblems,\n  requestAndReceiveSubmissions\n} from \"./ExternalApiSagas\";\nimport { requestAndReceiveToken } from \"./LoginSagas\";\nimport {\n  pullDataFromPoolApi,\n  saveDataToLocal,\n  sendDataToPoolApi\n} from \"./DataSagas\";\nimport { CREATE_TASK, DELETE_TASK, UPDATE_TASK } from \"../actions/TaskActions\";\n\nfunction* login() {\n  yield takeLatest(REQUEST_LOGIN, function*(action) {\n    yield call(requestAndReceiveToken, action);\n    yield call(pullDataFromPoolApi);\n    yield call(sendDataToPoolApi);\n  });\n}\n\nfunction* syncSubmissions() {\n  yield takeLatest(SAVE_USER_IDS, requestAndReceiveSubmissions);\n}\n\nfunction* backupLocal() {\n  yield takeLatest(\n    [\n      CREATE_TASK,\n      DELETE_TASK,\n      UPDATE_TASK,\n      SAVE_USER_IDS,\n      RECEIVE_TOKEN,\n      RECEIVE_DATA\n    ],\n    saveDataToLocal\n  );\n}\n\nfunction* backupRemote() {\n  yield takeLatest(\n    [CREATE_TASK, DELETE_TASK, UPDATE_TASK, SAVE_USER_IDS],\n    sendDataToPoolApi\n  );\n}\n\nfunction* backupRemoteOnce() {\n  yield take(RECEIVE_TOKEN);\n  yield call(pullDataFromPoolApi);\n  yield call(sendDataToPoolApi);\n}\n\nfunction* rootSaga() {\n  yield all([\n    call(backupRemoteOnce),\n    call(backupLocal),\n    call(backupRemote),\n    call(pullDataFromPoolApi),\n    call(requestAndReceiveProblems),\n    call(syncSubmissions),\n    call(login)\n  ]);\n}\n\nexport default rootSaga;\n","export interface PooledTask {\n  readonly key: string;\n  readonly validUrl: string | undefined;\n  readonly createdAt: number;\n  readonly nextReviewTime: number;\n  readonly lastJudgeAccepted: number | undefined;\n  readonly lastSolvedByUser: number | undefined;\n}\n\nexport const generateTask = (input: string): PooledTask => {\n  const validUrl = isValidUrl(input) ? input : undefined;\n  const createdAt = Date.now() / 1000;\n  return {\n    key: input,\n    validUrl,\n    createdAt,\n    nextReviewTime: createdAt,\n    lastJudgeAccepted: undefined,\n    lastSolvedByUser: undefined\n  };\n};\n\nconst isValidUrl = (url: string): boolean => {\n  try {\n    new URL(url);\n    return true;\n  } catch {\n    return false;\n  }\n};\n","import { State, UserIds } from \"./common\";\nimport { generateTask, PooledTask } from \"./common/PooledTask\";\nimport { List, Map } from \"immutable\";\nimport Action from \"./actions\";\nimport { Problem, Submission } from \"./api\";\nimport { Token } from \"./common/Token\";\nimport { CREATE_TASK, DELETE_TASK, UPDATE_TASK } from \"./actions/TaskActions\";\nimport { SAVE_USER_IDS } from \"./actions/ConfigActions\";\nimport {\n  RECEIVE_PROBLEMS,\n  RECEIVE_SUBMISSIONS\n} from \"./actions/ExternalApiActions\";\nimport { RECEIVE_DATA, RECEIVE_TOKEN } from \"./actions/PoolApiActions\";\nimport * as LocalStorage from \"./common/LocalStorage\";\nimport { parseSaveData } from \"./common/LocalStorage\";\nconst initialize = (): State => {\n  const savedData = LocalStorage.getSaveData();\n  if (savedData === undefined) {\n    // TODO remove this line in the future.\n    const item = localStorage.getItem(\"TASKS\");\n    const tasks = item\n      ? Map<string, PooledTask>(JSON.parse(item))\n      : Map<string, PooledTask>();\n\n    return {\n      tasks: tasks,\n      userIds: {\n        atcoder: \"\",\n        codeforces: \"\",\n        aoj: \"\",\n        yukicoder: \"\"\n      },\n      submissions: Map(),\n      problems: Map(),\n      token: undefined\n    };\n  } else {\n    return {\n      submissions: Map(),\n      problems: Map(),\n      ...savedData\n    };\n  }\n};\n\nconst tasksReducer = (tasks: Map<string, PooledTask>, action: Action) => {\n  switch (action.type) {\n    case CREATE_TASK: {\n      const { input } = action;\n      const task = generateTask(input);\n      if (tasks.has(task.key)) {\n        return tasks;\n      } else {\n        return tasks.set(task.key, task);\n      }\n    }\n    case DELETE_TASK: {\n      const { key } = action;\n      return tasks.remove(key);\n    }\n    case UPDATE_TASK: {\n      const { key, solvedSecond, nextReviewSecond } = action;\n      const item = tasks.get(key);\n      if (item === undefined) {\n        return tasks;\n      } else {\n        const updated = {\n          ...item,\n          lastSolvedByUser: solvedSecond,\n          nextReviewTime: nextReviewSecond\n        };\n        return tasks.set(key, updated);\n      }\n    }\n    case RECEIVE_DATA: {\n      const { rawData } = action;\n      const parsedData = parseSaveData(rawData);\n      if (parsedData === undefined) {\n        return tasks;\n      } else {\n        return parsedData.tasks.merge(tasks);\n      }\n    }\n    default: {\n      return tasks;\n    }\n  }\n};\n\nconst userIdsReducer = (userIds: UserIds, action: Action) => {\n  switch (action.type) {\n    case SAVE_USER_IDS: {\n      const { userIds } = action;\n      return userIds;\n    }\n    default: {\n      return userIds;\n    }\n  }\n};\n\nconst problemsReducer = (problems: Map<string, Problem>, action: Action) => {\n  switch (action.type) {\n    case RECEIVE_PROBLEMS: {\n      return problems.merge(action.problems.map(p => [p.url, p]));\n    }\n    default: {\n      return problems;\n    }\n  }\n};\n\nconst submissionsReducer = (\n  submissions: Map<string, List<Submission>>,\n  action: Action\n) => {\n  switch (action.type) {\n    case RECEIVE_SUBMISSIONS: {\n      const { submissions: received } = action;\n      const receivedMap = received.reduce(\n        (map, s) => map.update(s.problemUrl, List(), list => list.push(s)),\n        Map<string, List<Submission>>()\n      );\n      return submissions.mergeWith(\n        (oldList, newList) => oldList.merge(newList),\n        receivedMap\n      );\n    }\n    default: {\n      return submissions;\n    }\n  }\n};\n\nconst tokenReducer = (token: Token | undefined, action: Action) => {\n  switch (action.type) {\n    case RECEIVE_TOKEN: {\n      return action.token;\n    }\n    default: {\n      return token;\n    }\n  }\n};\n\nconst rootReducer = (state: State = initialize(), action: Action): State => {\n  console.log(action);\n  return {\n    tasks: tasksReducer(state.tasks, action),\n    userIds: userIdsReducer(state.userIds, action),\n    submissions: submissionsReducer(state.submissions, action),\n    problems: problemsReducer(state.problems, action),\n    token: tokenReducer(state.token, action)\n  };\n};\nexport default rootReducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./pages/App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Provider } from \"react-redux\";\nimport rootSaga from \"./sagas\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { applyMiddleware, compose, createStore } from \"redux\";\nimport rootReducer from \"./reducers\";\n\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(\n  rootReducer,\n  compose(applyMiddleware(sagaMiddleware))\n);\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}