{"version":3,"sources":["components/NavigationBar.tsx","actions/index.ts","pages/SettingsPage.tsx","common/index.ts","common/Reviewer.ts","components/ModalCard.tsx","components/TodoCards.tsx","pages/TodoPage.tsx","pages/App.tsx","api/Codeforces.ts","api/AtCoder.ts","api/Yukicoder.ts","api/AOJ.ts","common/LocalStorage.ts","sagas/index.ts","common/PooledTask.ts","reducers/index.ts","index.tsx"],"names":["NavigationBar","react","Navbar","color","light","expand","NavbarBrand","tag","RouterLink","to","Nav","className","navbar","NavItem","NavLink","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","right","DropdownItem","href","target","SUBMIT_TASK","REMOVE_TASK","SAVE_USERNAME","SOLVE_TASK","receiveProblems","problems","type","receiveSubmissions","submissions","clearSubmissions","SettingsPage","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","atcoder","userIds","yukicoder","codeforces","aoj","_this2","_this$state","isSaved","Row","FormGroup","Label","Input","onChange","e","setState","value","placeholder","Button","disabled","onClick","save","React","connect","dispatch","saveUsername","formatDate","timeSecond","d","Date","year","getFullYear","month","getMonth","slice","date","getDate","concat","daysToSeconds","days","parseDate","dateString","parseInt","setFullYear","setMonth","setDate","getTime","ModalCard","modalSolvedDate","modalReviewDate","isModalOpen","modalType","nowSecond","now","_this$props","title","url","taskKey","lastJudgeAccepted","lastSolvedByUser","nextReviewTime","judge","nextReviewSuggestion","lastSolvedTimeSecond","reviewResult","currentSecond","duration","Math","max","suggestNextReviewTime","solvedDate","reviewDate","outDated","ListGroup","ListGroupItem","ListGroupItemHeading","Badge","Table","scope","style","ButtonGroup","key","Modal","isOpen","toggle","ModalHeader","ModalBody","ModalFooter","remove","solvedSecond","reviewSecond","review","tasks","removeTask","solve","solveTask","valueSeq","sort","a","b","map","task","problem","validUrl","get","undefined","Col","components_ModalCard","TodoPage","setSuggestions","input","words","toLocaleLowerCase","split","filter","word","length","suggestions","index","every","indexOf","toArray","focusing","submit","isAccepted","list","find","s","result","onKeyDown","min","active","action","pill","components_TodoCards","App","react_router_dom","components_NavigationBar","Container","react_router","exact","path","component","fetchCodeforcesSubmissions","userId","from","arguments","count","fetch","then","r","json","payload","List","contestId","id","author","members","handle","verdict","problemUrl","creationTimeSecond","fetchCodeforcesProblems","p","name","fetchAtCoderSubmissions","submission","contest_id","user_id","problem_id","epoch_second","fetchAtCoderProblems","fetchYukicoderProblems","No","Title","fetchYukicoderSolvedProblems","fetchAOJProblems","page","size","fetchAOJSubmissions","problemId","judgeId","language","submissionDate","saveUserIds","localStorage","setItem","JSON","stringify","loadUserIds","item","getItem","parse","saveTasks","loadTasks","Map","requestProblems","requestSubmissions","rootSaga","regenerator_default","wrap","_context5","prev","next","all","fork","mark","_callee","_context","sent","put","Actions","stop","_callee2","_context2","_callee3","_context3","_callee4","_context4","_marked","_context10","select","_callee5","_context6","_callee6","_context7","_callee7","_context8","_callee8","_context9","_marked2","_context12","takeLatest","_callee9","_context11","LocalStorage","_marked3","_context14","_callee10","_context13","_marked4","_context15","_marked5","isValidUrl","URL","_unused","taskReducer","set","createdAt","createTask","oldTask","newTask","objectSpread","rootReducer","console","log","userIdsReducer","mergeWith","reduce","update","push","clear","submissionReducer","merge","problemReducer","refineTask","sagaMiddleware","createSagaMiddleware","store","createStore","compose","applyMiddleware","run","ReactDOM","render","react_default","createElement","es","pages_App","document","getElementById"],"mappings":"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","file":"static/js/main.bd4e82b3.chunk.js","sourcesContent":["import {\n  DropdownItem,\n  DropdownMenu,\n  DropdownToggle,\n  Nav,\n  Navbar,\n  NavbarBrand,\n  NavItem,\n  NavLink,\n  UncontrolledDropdown\n} from \"reactstrap\";\nimport * as React from \"react\";\nimport { NavLink as RouterLink } from \"react-router-dom\";\n\nconst NavigationBar = () => (\n  <Navbar color=\"light\" light expand=\"md\">\n    <NavbarBrand tag={RouterLink} to=\"/\">\n      Problem Pool\n    </NavbarBrand>\n    <Nav className=\"ml-auto\" navbar>\n      <NavItem>\n        <NavLink tag={RouterLink} to=\"/settings\">\n          Settings\n        </NavLink>\n      </NavItem>\n      <UncontrolledDropdown nav inNavbar>\n        <DropdownToggle nav caret>\n          Links\n        </DropdownToggle>\n        <DropdownMenu right>\n          <DropdownItem\n            href=\"https://github.com/kenkoooo/problem-pool\"\n            target=\"_blank\"\n          >\n            GitHub\n          </DropdownItem>\n          <DropdownItem\n            href=\"https://onlinejudge.u-aizu.ac.jp/\"\n            target=\"_blank\"\n          >\n            AOJ\n          </DropdownItem>\n          <DropdownItem href=\"https://atcoder.jp/\" target=\"_blank\">\n            AtCoder\n          </DropdownItem>\n          <DropdownItem href=\"https://codeforces.com/\" target=\"_blank\">\n            Codeforces\n          </DropdownItem>\n          <DropdownItem href=\"https://yukicoder.me/\" target=\"_blank\">\n            yukicoder\n          </DropdownItem>\n        </DropdownMenu>\n      </UncontrolledDropdown>\n    </Nav>\n  </Navbar>\n);\n\nexport default NavigationBar;\n","import { List } from \"immutable\";\nimport { Problem, Submission } from \"../api\";\nimport { OnlineJudge, UserIds } from \"../common\";\n\nexport const SUBMIT_TASK = \"SUBMIT_TASK\";\nexport const REMOVE_TASK = \"REMOVE_TASK\";\nexport const RECEIVE_PROBLEMS = \"RECEIVE_PROBLEMS\";\nexport const SAVE_USERNAME = \"SAVE_USERNAME\";\nexport const REQUEST_SUBMISSIONS = \"REQUEST_SUBMISSIONS\";\nexport const RECEIVE_SUBMISSIONS = \"RECEIVE_SUBMISSIONS\";\nexport const CLEAR_SUBMISSIONS = \"CLEAR_SUBMISSIONS\";\nexport const SOLVE_TASK = \"SOLVE_TASK\";\n\nexport const submitTask = (url: string) => ({\n  type: SUBMIT_TASK as typeof SUBMIT_TASK,\n  url\n});\n\nexport const removeTask = (key: string) => ({\n  type: REMOVE_TASK as typeof REMOVE_TASK,\n  key\n});\n\nexport const receiveProblems = (problems: List<Problem>) => ({\n  type: RECEIVE_PROBLEMS as typeof RECEIVE_PROBLEMS,\n  problems\n});\n\nexport const saveUsername = (userIds: UserIds) => ({\n  type: SAVE_USERNAME as typeof SAVE_USERNAME,\n  userIds\n});\n\nexport const requestSubmissions = (userId: string, judge: OnlineJudge) => ({\n  type: REQUEST_SUBMISSIONS as typeof REQUEST_SUBMISSIONS,\n  userId,\n  judge\n});\n\nexport const receiveSubmissions = (submissions: List<Submission>) => ({\n  type: RECEIVE_SUBMISSIONS as typeof RECEIVE_SUBMISSIONS,\n  submissions\n});\n\nexport const clearSubmissions = () => ({\n  type: CLEAR_SUBMISSIONS as typeof CLEAR_SUBMISSIONS\n});\n\nexport const solveTask = (\n  key: string,\n  solvedSecond: number,\n  reviewSecond: number\n) => ({\n  type: SOLVE_TASK as typeof SOLVE_TASK,\n  key,\n  solvedSecond,\n  reviewSecond\n});\n\nexport type Action =\n  | ReturnType<typeof submitTask>\n  | ReturnType<typeof removeTask>\n  | ReturnType<typeof receiveProblems>\n  | ReturnType<typeof saveUsername>\n  | ReturnType<typeof receiveSubmissions>\n  | ReturnType<typeof requestSubmissions>\n  | ReturnType<typeof clearSubmissions>\n  | ReturnType<typeof solveTask>;\n","import { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport * as React from \"react\";\nimport { Button, FormGroup, Input, Label, Row } from \"reactstrap\";\nimport { saveUsername } from \"../actions\";\nimport { State, UserIds } from \"../common\";\n\ninterface Props {\n  readonly save: (userIds: UserIds) => void;\n  readonly userIds: UserIds;\n}\n\ninterface LocalState {\n  atcoder: string;\n  codeforces: string;\n  yukicoder: string;\n  aoj: string;\n}\n\nclass SettingsPage extends React.Component<Props, LocalState> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      atcoder: props.userIds.atcoder,\n      yukicoder: props.userIds.yukicoder,\n      codeforces: props.userIds.codeforces,\n      aoj: props.userIds.aoj\n    };\n  }\n\n  render() {\n    const { atcoder, codeforces, yukicoder, aoj } = this.state;\n    const isSaved =\n      atcoder === this.props.userIds.atcoder &&\n      codeforces === this.props.userIds.codeforces &&\n      yukicoder === this.props.userIds.yukicoder &&\n      aoj === this.props.userIds.aoj;\n    return (\n      <div>\n        <Row>\n          <FormGroup>\n            <Label>AtCoder ID</Label>\n            <Input\n              onChange={e => this.setState({ atcoder: e.target.value })}\n              type=\"text\"\n              placeholder=\"AtCoder ID\"\n              value={atcoder}\n            />\n          </FormGroup>\n        </Row>\n        <Row>\n          <FormGroup>\n            <Label>AOJ ID</Label>\n            <Input\n              onChange={e => this.setState({ aoj: e.target.value })}\n              type=\"text\"\n              placeholder=\"AOJ ID\"\n              value={aoj}\n            />\n          </FormGroup>\n        </Row>\n        <Row>\n          <FormGroup>\n            <Label>yukicoder ID</Label>\n            <Input\n              onChange={e => this.setState({ yukicoder: e.target.value })}\n              type=\"text\"\n              placeholder=\"yukicoder ID\"\n              value={yukicoder}\n            />\n          </FormGroup>\n        </Row>\n        <Row>\n          <FormGroup>\n            <Label>Codeforces ID</Label>\n            <Input\n              onChange={e => this.setState({ codeforces: e.target.value })}\n              type=\"text\"\n              placeholder=\"Codeforces ID\"\n              value={codeforces}\n            />\n          </FormGroup>\n        </Row>\n        <Row>\n          {isSaved ? (\n            <Button disabled>Saved</Button>\n          ) : (\n            <Button\n              color=\"danger\"\n              onClick={() =>\n                this.props.save({ atcoder, codeforces, yukicoder, aoj })\n              }\n            >\n              Save\n            </Button>\n          )}\n        </Row>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: State) => ({\n  userIds: state.userIds\n});\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  save: (userIds: UserIds) => dispatch(saveUsername(userIds))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SettingsPage);\n","import { List, Map } from \"immutable\";\nimport { Problem, Submission } from \"../api\";\nimport { PooledTask } from \"./PooledTask\";\n\nexport type OnlineJudge = \"AtCoder\" | \"Codeforces\" | \"yukicoder\" | \"AOJ\";\n\nexport interface UserIds {\n  readonly atcoder: string;\n  readonly codeforces: string;\n  readonly aoj: string;\n  readonly yukicoder: string;\n}\n\nexport interface State {\n  readonly tasks: Map<string, PooledTask>;\n  readonly userIds: UserIds;\n  readonly submissions: Map<string, List<Submission>>;\n  readonly problems: Map<string, Problem>;\n}\n\nexport const formatDate = (timeSecond: number) => {\n  const d = new Date(timeSecond * 1000);\n  const year = d.getFullYear();\n  const month = (\"0\" + (d.getMonth() + 1)).slice(-2);\n  const date = (\"0\" + d.getDate()).slice(-2);\n  return `${year}-${month}-${date}`;\n};\n","export type ReviewResult = \"Solved\" | \"Good\" | \"Hard\" | \"Failed\";\n\nconst daysToSeconds = (days: number) => days * 24 * 3600;\n\nexport const suggestNextReviewTime = (\n  lastSolvedTimeSecond: number | null,\n  reviewResult: ReviewResult\n) => {\n  const currentSecond = Date.now() / 1000;\n  const duration = lastSolvedTimeSecond\n    ? currentSecond - lastSolvedTimeSecond\n    : 0;\n  switch (reviewResult) {\n    case \"Solved\":\n      return Math.max(duration * 2, daysToSeconds(4)) + currentSecond;\n    case \"Good\":\n      return Math.max(duration, daysToSeconds(4)) + currentSecond;\n    case \"Hard\":\n      return Math.max(duration / 2, daysToSeconds(4)) + currentSecond;\n    case \"Failed\":\n      return daysToSeconds(4) + currentSecond;\n  }\n};\n","import * as React from \"react\";\nimport {\n  Badge,\n  Button,\n  ButtonGroup,\n  FormGroup,\n  Input,\n  Label,\n  ListGroup,\n  ListGroupItem,\n  ListGroupItemHeading,\n  Modal,\n  ModalBody,\n  ModalFooter,\n  ModalHeader,\n  Table\n} from \"reactstrap\";\nimport { formatDate, OnlineJudge } from \"../common\";\nimport { ReviewResult, suggestNextReviewTime } from \"../common/Reviewer\";\n\ninterface Props {\n  taskKey: string;\n  url: string | null;\n  title: string | null;\n  lastJudgeAccepted: number | null;\n  lastSolvedByUser: number | null;\n  nextReviewTime: number;\n  judge: OnlineJudge | null;\n  remove: () => void;\n  review: (solvedDate: number, reviewDate: number) => void;\n}\n\ninterface LocalState {\n  isModalOpen: boolean;\n  modalSolvedDate: string | null;\n  modalReviewDate: string | null;\n  modalType: ReviewResult | \"Remove\";\n}\n\nconst parseDate = (dateString: string) => {\n  const year = parseInt(dateString.slice(0, 4));\n  const month = parseInt(dateString.slice(5, 7));\n  const date = parseInt(dateString.slice(8, 10));\n  const d = new Date();\n  d.setFullYear(year);\n  d.setMonth(month - 1);\n  d.setDate(date);\n  return d.getTime() / 1000;\n};\n\nclass ModalCard extends React.Component<Props, LocalState> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      modalSolvedDate: null,\n      modalReviewDate: null,\n      isModalOpen: false,\n      modalType: \"Remove\"\n    };\n  }\n  render() {\n    const {\n      isModalOpen,\n      modalType,\n      modalSolvedDate,\n      modalReviewDate\n    } = this.state;\n    const nowSecond = Date.now() / 1000;\n    const {\n      title,\n      url,\n      taskKey,\n      lastJudgeAccepted,\n      lastSolvedByUser,\n      nextReviewTime,\n      judge\n    } = this.props;\n    const nextReviewSuggestion =\n      modalType !== \"Remove\"\n        ? suggestNextReviewTime(lastSolvedByUser, modalType)\n        : -1;\n    const solvedDate =\n      modalSolvedDate !== null ? modalSolvedDate : formatDate(nowSecond);\n    const reviewDate =\n      modalReviewDate !== null\n        ? modalReviewDate\n        : formatDate(nextReviewSuggestion);\n    const outDated = formatDate(nowSecond) >= formatDate(nextReviewTime);\n    return (\n      <ListGroup>\n        <ListGroupItem>\n          <ListGroupItemHeading>\n            {title && url && judge ? (\n              <div>\n                <Badge>{judge}</Badge>{\" \"}\n                <a href={url} target=\"_blank\">\n                  {title}\n                </a>\n              </div>\n            ) : (\n              taskKey\n            )}\n          </ListGroupItemHeading>\n          <Table>\n            <tbody>\n              {\n                <tr>\n                  <th scope=\"row\">Next review</th>\n                  {outDated ? (\n                    <td style={{ color: \"red\" }}>\n                      <strong> {formatDate(nextReviewTime)}</strong>\n                    </td>\n                  ) : (\n                    <td>{formatDate(nextReviewTime)}</td>\n                  )}\n                </tr>\n              }\n              {lastSolvedByUser !== null ? (\n                <tr>\n                  <th scope=\"row\">Last solved</th>\n                  <td>{formatDate(lastSolvedByUser)}</td>\n                </tr>\n              ) : null}\n              {lastJudgeAccepted !== null ? (\n                <tr>\n                  <th scope=\"row\">Last accepted</th>\n                  <td>{formatDate(lastJudgeAccepted)}</td>\n                </tr>\n              ) : null}\n            </tbody>\n          </Table>\n\n          <ButtonGroup className=\"d-flex justify-content-end\">\n            <Button\n              key=\"solved\"\n              color=\"success\"\n              onClick={() =>\n                this.setState({\n                  isModalOpen: true,\n                  modalType: \"Solved\"\n                })\n              }\n            >\n              Solved\n            </Button>\n            <Button\n              key=\"good\"\n              onClick={() =>\n                this.setState({\n                  isModalOpen: true,\n                  modalType: \"Good\"\n                })\n              }\n            >\n              Good\n            </Button>\n            <Button\n              key=\"hard\"\n              color=\"warning\"\n              onClick={() =>\n                this.setState({\n                  isModalOpen: true,\n                  modalType: \"Hard\"\n                })\n              }\n            >\n              Hard\n            </Button>\n            <Button\n              key=\"failed\"\n              color=\"danger\"\n              onClick={() =>\n                this.setState({\n                  isModalOpen: true,\n                  modalType: \"Failed\"\n                })\n              }\n            >\n              Failed\n            </Button>\n            <Button\n              key=\"remove\"\n              color=\"dark\"\n              onClick={() =>\n                this.setState({\n                  isModalOpen: true,\n                  modalType: \"Remove\"\n                })\n              }\n            >\n              Remove\n            </Button>\n          </ButtonGroup>\n          <Modal\n            isOpen={isModalOpen}\n            toggle={() => this.setState({ isModalOpen: !isModalOpen })}\n          >\n            {modalType === \"Remove\" ? (\n              <div>\n                <ModalHeader>Remove this card?</ModalHeader>\n                <ModalBody>{title ? title : taskKey}</ModalBody>\n                <ModalFooter>\n                  <Button\n                    onClick={() => {\n                      this.setState({ isModalOpen: false });\n                      this.props.remove();\n                    }}\n                  >\n                    Remove\n                  </Button>\n                  <Button onClick={() => this.setState({ isModalOpen: false })}>\n                    Cancel\n                  </Button>\n                </ModalFooter>\n              </div>\n            ) : (\n              <div>\n                <ModalHeader>Next review will be ...</ModalHeader>\n                <ModalBody>\n                  <FormGroup>\n                    <Label>Solved:</Label>\n                    <Input\n                      type=\"date\"\n                      value={solvedDate}\n                      onChange={e =>\n                        this.setState({ modalSolvedDate: e.target.value })\n                      }\n                    />\n                  </FormGroup>\n                  <Label>Next Review:</Label>\n                  <Input\n                    type=\"date\"\n                    value={reviewDate}\n                    onChange={e =>\n                      this.setState({ modalReviewDate: e.target.value })\n                    }\n                  />\n                </ModalBody>\n                <ModalFooter>\n                  <Button\n                    onClick={() => {\n                      this.setState({ isModalOpen: false });\n                      const solvedSecond = parseDate(solvedDate);\n                      const reviewSecond = parseDate(reviewDate);\n                      this.props.review(solvedSecond, reviewSecond);\n                    }}\n                  >\n                    Submit\n                  </Button>\n                  <Button onClick={() => this.setState({ isModalOpen: false })}>\n                    Cancel\n                  </Button>\n                </ModalFooter>\n              </div>\n            )}\n          </Modal>\n        </ListGroupItem>\n      </ListGroup>\n    );\n  }\n}\n\nexport default ModalCard;\n","import * as React from \"react\";\nimport { Dispatch } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { List, Map } from \"immutable\";\nimport { PooledTask } from \"../common/PooledTask\";\nimport { State } from \"../common\";\nimport { removeTask, solveTask } from \"../actions\";\nimport { Col, Row } from \"reactstrap\";\nimport { Problem, Submission } from \"../api\";\nimport ModalCard from \"./ModalCard\";\n\ninterface Props {\n  tasks: Map<string, PooledTask>;\n  submissions: Map<string, List<Submission>>;\n  problems: Map<string, Problem>;\n  remove: (key: string) => void;\n  solve: (key: string, solvedSecond: number, reviewSecond: number) => void;\n}\nconst TodoCards = (props: Props) => (\n  <div>\n    {props.tasks\n      .valueSeq()\n      .sort((a, b) => a.nextReviewTime - b.nextReviewTime)\n      .map(task => {\n        const problem = task.validUrl\n          ? props.problems.get(task.validUrl)\n          : undefined;\n        const { lastJudgeAccepted, lastSolvedByUser, nextReviewTime } = task;\n        return (\n          <Row key={task.key}>\n            <Col>\n              <ModalCard\n                taskKey={task.key}\n                url={task.validUrl}\n                title={problem ? problem.title : null}\n                lastJudgeAccepted={lastJudgeAccepted}\n                lastSolvedByUser={lastSolvedByUser}\n                nextReviewTime={nextReviewTime}\n                remove={() => props.remove(task.key)}\n                review={(solvedDate: number, reviewDate: number) =>\n                  props.solve(task.key, solvedDate, reviewDate)\n                }\n                judge={problem ? problem.judge : null}\n              />\n            </Col>\n          </Row>\n        );\n      })}\n  </div>\n);\n\nconst mapStateToProps = (state: State) => ({\n  tasks: state.tasks,\n  submissions: state.submissions,\n  problems: state.problems\n});\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  remove: (key: string) => dispatch(removeTask(key)),\n  solve: (key: string, solvedSecond: number, reviewSecond: number) =>\n    dispatch(solveTask(key, solvedSecond, reviewSecond))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TodoCards);\n","import { connect } from \"react-redux\";\nimport { Badge, Col, Input, ListGroup, ListGroupItem, Row } from \"reactstrap\";\nimport * as React from \"react\";\nimport { submitTask } from \"../actions\";\nimport { Dispatch } from \"redux\";\nimport { List, Map } from \"immutable\";\nimport { Problem, Submission } from \"../api\";\nimport { State } from \"../common\";\nimport TodoCards from \"../components/TodoCards\";\n\ninterface Props {\n  readonly submit: (problem: string) => void;\n  readonly problems: Map<string, Problem>;\n  readonly submissions: Map<string, List<Submission>>;\n}\n\ninterface LocalState {\n  input: string;\n  suggestions: Problem[];\n  focusing: number;\n}\n\nclass TodoPage extends React.Component<Props, LocalState> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      input: \"\",\n      suggestions: [],\n      focusing: -1\n    };\n  }\n\n  setSuggestions = (input: string) => {\n    const words = input\n      .toLocaleLowerCase()\n      .split(\" \")\n      .filter(word => word.length > 0);\n    if (words.length > 0) {\n      const suggestions = this.props.problems\n        .valueSeq()\n        .filter(problem => {\n          const index = (\n            problem.title +\n            \" \" +\n            problem.url +\n            \" \" +\n            problem.judge\n          ).toLocaleLowerCase();\n          return words.every(word => index.indexOf(word) !== -1);\n        })\n        .slice(0, 10)\n        .toArray();\n      this.setState({ suggestions, focusing: -1 });\n    } else {\n      this.setState({ suggestions: [], focusing: -1 });\n    }\n  };\n\n  submit = (key: string) => {\n    this.props.submit(key);\n    this.setState({\n      input: \"\",\n      suggestions: [],\n      focusing: -1\n    });\n  };\n\n  render() {\n    const { suggestions, focusing } = this.state;\n    const { submissions } = this.props;\n    const isAccepted = (problem: Problem) => {\n      const list = submissions.get(problem.url);\n      return (\n        list !== undefined &&\n        list.find(s => s.result === \"Accepted\") !== undefined\n      );\n    };\n\n    return (\n      <div>\n        <Row>\n          <Col>\n            <Input\n              onKeyDown={e => {\n                if (e.key === \"Enter\") {\n                  if (0 <= focusing && focusing < suggestions.length) {\n                    this.submit(suggestions[focusing].url);\n                  } else {\n                    this.submit(this.state.input);\n                  }\n                } else if (e.key === \"ArrowDown\") {\n                  this.setState({\n                    focusing: Math.min(focusing + 1, suggestions.length - 1)\n                  });\n                } else if (e.key === \"ArrowUp\") {\n                  this.setState({\n                    focusing: Math.max(focusing - 1, -1)\n                  });\n                }\n              }}\n              type=\"text\"\n              onChange={e => {\n                const input = e.target.value;\n                this.setState({ input });\n                this.setSuggestions(input);\n              }}\n              value={this.state.input}\n            />\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <ListGroup>\n              {this.state.suggestions.map((problem, index) => (\n                <ListGroupItem\n                  color={isAccepted(problem) ? \"success\" : undefined}\n                  active={index === focusing}\n                  key={problem.url}\n                  onClick={() => this.submit(problem.url)}\n                  action\n                >\n                  {problem.title} <Badge pill>{problem.judge}</Badge>\n                </ListGroupItem>\n              ))}\n            </ListGroup>\n          </Col>\n        </Row>\n        <TodoCards />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: State) => ({\n  problems: state.problems,\n  submissions: state.submissions\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  submit: (problem: string) => dispatch(submitTask(problem))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TodoPage);\n","import { HashRouter, Route, Switch } from \"react-router-dom\";\nimport NavigationBar from \"../components/NavigationBar\";\nimport * as React from \"react\";\nimport { Container } from \"reactstrap\";\nimport SettingsPage from \"./SettingsPage\";\nimport TodoPage from \"./TodoPage\";\n\nconst App = () => (\n  <HashRouter>\n    <NavigationBar />\n    <Container>\n      <Switch>\n        <Route>\n          <Route exact path=\"/\" component={TodoPage} />\n          <Route exact path=\"/settings\" component={SettingsPage} />\n        </Route>\n      </Switch>\n    </Container>\n  </HashRouter>\n);\n\nexport default App;\n","import { Problem, Submission } from \"./index\";\nimport { List } from \"immutable\";\n\nexport const fetchCodeforcesSubmissions = (\n  userId: string,\n  from: number = 1,\n  count: number = 100000\n) =>\n  fetch(\n    `https://codeforces.com/api/user.status?handle=${userId}&from=${from}&count=${count}`\n  )\n    .then(r => r.json())\n    .then(\n      (payload: {\n        result: {\n          id: number;\n          creationTimeSecond: number;\n          problem: {\n            contestId: number;\n            index: string;\n            name: string;\n          };\n          author: {\n            members: { handle: string }[];\n          };\n          programmingLanguage: string;\n          verdict: string;\n        }[];\n      }): List<Submission> =>\n        List(\n          payload.result.map(s => ({\n            url: `https://codeforces.com/contest/${s.problem.contestId}/submission/${s.id}`,\n            userId: s.author.members[0].handle,\n            result: s.verdict === \"OK\" ? \"Accepted\" : \"Rejected\",\n            problemUrl: `https://codeforces.com/contest/${s.problem.contestId}/problem/${s.problem.index}`,\n            creationTimeSecond: s.creationTimeSecond\n          }))\n        )\n    );\n\nexport const fetchCodeforcesProblems = () =>\n  fetch(\"https://codeforces.com/api/problemset.problems\")\n    .then(r => r.json())\n    .then(\n      (payload: {\n        result: {\n          problems: {\n            contestId: number;\n            index: string;\n            name: string;\n            points: number | undefined;\n          }[];\n        };\n      }): List<Problem> =>\n        List(\n          payload.result.problems.map(p => ({\n            url: `https://codeforces.com/contest/${p.contestId}/problem/${p.index}`,\n            title: p.name,\n            judge: \"Codeforces\"\n          }))\n        )\n    );\n","import { Problem, Submission } from \"./index\";\nimport { List } from \"immutable\";\n\nexport const fetchAtCoderSubmissions = (userId: string) =>\n  fetch(`https://kenkoooo.com/atcoder/atcoder-api/results?user=${userId}`)\n    .then(r => r.json())\n    .then(\n      (submissions: AtCoderSubmission[]): List<Submission> =>\n        List(\n          submissions.map(submission => ({\n            url: `https://atcoder.jp/contests/${submission.contest_id}/submissions/${submission.id}`,\n            userId: submission.user_id,\n            result: submission.result === \"AC\" ? \"Accepted\" : \"Rejected\",\n            problemUrl: `https://atcoder.jp/contests/${submission.contest_id}/tasks/${submission.problem_id}`,\n            creationTimeSecond: submission.epoch_second\n          }))\n        )\n    );\nexport const fetchAtCoderProblems = () =>\n  fetch(\"https://kenkoooo.com/atcoder/resources/problems.json\")\n    .then(r => r.json())\n    .then(\n      (problems: AtCoderProblem[]): List<Problem> =>\n        List(\n          problems.map(problem => ({\n            url: `https://atcoder.jp/contests/${problem.contest_id}/tasks/${problem.id}`,\n            title: problem.title,\n            judge: \"AtCoder\"\n          }))\n        )\n    );\n\ninterface AtCoderSubmission {\n  id: number;\n  epoch_second: number;\n  problem_id: string;\n  contest_id: string;\n  user_id: string;\n  result: string;\n}\n\ninterface AtCoderProblem {\n  title: string;\n  contest_id: string;\n  id: string;\n}\n","import { List } from \"immutable\";\nimport { Problem, Submission } from \"./index\";\n\nexport const fetchYukicoderProblems = () =>\n  fetch(\"https://yukicoder.me/api/v1/problems\")\n    .then(r => r.json())\n    .then(\n      (\n        problems: { No: number; ProblemId: number; Title: string }[]\n      ): List<Problem> =>\n        List(\n          problems.map(problem => ({\n            url: `https://yukicoder.me/problems/no/${problem.No}`,\n            title: `No.${problem.No} ${problem.Title}`,\n            judge: \"yukicoder\"\n          }))\n        )\n    );\n\nexport const fetchYukicoderSolvedProblems = (userId: string) =>\n  fetch(`https://yukicoder.me/api/v1/solved/name/${userId}`)\n    .then(r => r.json())\n    .then(\n      (\n        problems: { No: number; ProblemId: number; Title: string }[]\n      ): List<Submission> =>\n        List(\n          problems.map(problem => ({\n            url: `https://yukicoder.me/problems/no/${problem.No}`,\n            userId: userId,\n            result: \"Accepted\",\n            problemUrl: `https://yukicoder.me/problems/no/${problem.No}`,\n            creationTimeSecond: null\n          }))\n        )\n    );\n","import { List } from \"immutable\";\nimport { Problem, Submission } from \"./index\";\n\nexport const fetchAOJProblems = (page: number = 0, size: number = 10000) =>\n  fetch(`https://judgeapi.u-aizu.ac.jp/problems?page=${page}&size=${size}`)\n    .then(r => r.json())\n    .then(\n      (\n        problems: {\n          id: string;\n          name: string;\n        }[]\n      ): List<Problem> =>\n        List(\n          problems.map(problem => ({\n            url: `https://onlinejudge.u-aizu.ac.jp/problems/${problem.id}`,\n            title: `${problem.id}: ${problem.name}`,\n            judge: \"AOJ\"\n          }))\n        )\n    );\n\nexport const fetchAOJSubmissions = (\n  userId: string,\n  page: number = 0,\n  size: number = 100000\n) =>\n  fetch(\n    `https://judgeapi.u-aizu.ac.jp/solutions/users/${userId}?page=${page}&size=${size}`\n  )\n    .then(r => r.json())\n    .then(\n      (\n        submissions: {\n          judgeId: number;\n          submissionDate: number;\n          userId: string;\n          problemId: string;\n          language: string;\n        }[]\n      ): List<Submission> =>\n        List(\n          submissions.map(submission => ({\n            url: `https://onlinejudge.u-aizu.ac.jp/solutions/problem/${submission.problemId}/review/${submission.judgeId}/${submission.userId}/${submission.language}`,\n            problemUrl: `https://onlinejudge.u-aizu.ac.jp/problems/${submission.problemId}`,\n            userId: submission.userId,\n            result: \"Accepted\",\n            creationTimeSecond: submission.submissionDate / 1000\n          }))\n        )\n    );\n","import { UserIds } from \"./index\";\nimport { Map } from \"immutable\";\nimport { PooledTask } from \"./PooledTask\";\n\nconst USER_IDS = \"USER_IDS\";\nconst TASKS = \"TASKS\";\n\nexport const saveUserIds = (userIds: UserIds) =>\n  localStorage.setItem(USER_IDS, JSON.stringify(userIds));\n\nexport const loadUserIds = (): UserIds => {\n  const item = localStorage.getItem(USER_IDS);\n  if (item === null) {\n    return { atcoder: \"\", codeforces: \"\", yukicoder: \"\", aoj: \"\" };\n  } else {\n    return JSON.parse(item) as UserIds;\n  }\n};\n\nexport const saveTasks = (tasks: Map<string, PooledTask>) =>\n  localStorage.setItem(TASKS, JSON.stringify(tasks));\nexport const loadTasks = (): Map<string, PooledTask> => {\n  const item = localStorage.getItem(TASKS);\n  if (item === null) {\n    return Map<string, PooledTask>();\n  } else {\n    return Map<string, PooledTask>(JSON.parse(item));\n  }\n};\n","import { all, call, fork, put, select, takeLatest } from \"redux-saga/effects\";\nimport {\n  fetchCodeforcesProblems,\n  fetchCodeforcesSubmissions\n} from \"../api/Codeforces\";\nimport * as Actions from \"../actions\";\nimport { State } from \"../common\";\nimport { fetchAtCoderProblems, fetchAtCoderSubmissions } from \"../api/AtCoder\";\nimport {\n  fetchYukicoderProblems,\n  fetchYukicoderSolvedProblems\n} from \"../api/Yukicoder\";\nimport { fetchAOJProblems, fetchAOJSubmissions } from \"../api/AOJ\";\nimport * as LocalStorage from \"../common/LocalStorage\";\n\nfunction* requestProblems() {\n  yield all([\n    fork(function*() {\n      const problems = yield call(fetchAtCoderProblems);\n      yield put(Actions.receiveProblems(problems));\n    }),\n    fork(function*() {\n      const problems = yield call(fetchCodeforcesProblems);\n      yield put(Actions.receiveProblems(problems));\n    }),\n    fork(function*() {\n      const problems = yield call(fetchYukicoderProblems);\n      yield put(Actions.receiveProblems(problems));\n    }),\n    fork(function*() {\n      const problems = yield call(fetchAOJProblems);\n      yield put(Actions.receiveProblems(problems));\n    })\n  ]);\n}\n\nfunction* requestSubmissions() {\n  yield put(Actions.clearSubmissions());\n  const userIds = yield select((state: State) => state.userIds);\n  yield all([\n    fork(function*() {\n      if (userIds.codeforces.length > 0) {\n        const submissions = yield call(\n          fetchCodeforcesSubmissions,\n          userIds.codeforces\n        );\n        yield put(Actions.receiveSubmissions(submissions));\n      }\n    }),\n    fork(function*() {\n      if (userIds.atcoder.length > 0) {\n        const submissions = yield call(\n          fetchAtCoderSubmissions,\n          userIds.atcoder\n        );\n        yield put(Actions.receiveSubmissions(submissions));\n      }\n    }),\n    fork(function*() {\n      if (userIds.yukicoder.length > 0) {\n        const submissions = yield call(\n          fetchYukicoderSolvedProblems,\n          userIds.yukicoder\n        );\n        yield put(Actions.receiveSubmissions(submissions));\n      }\n    }),\n    fork(function*() {\n      if (userIds.aoj.length > 0) {\n        const submissions = yield call(fetchAOJSubmissions, userIds.aoj);\n        yield put(Actions.receiveSubmissions(submissions));\n      }\n    })\n  ]);\n}\n\nfunction* saveUserIds() {\n  yield takeLatest(Actions.SAVE_USERNAME, function*() {\n    const userIds = yield select((state: State) => state.userIds);\n    yield call(LocalStorage.saveUserIds, userIds);\n    yield call(requestSubmissions);\n  });\n}\n\nfunction* saveTasks() {\n  yield takeLatest(\n    (action: Actions.Action) =>\n      action.type === Actions.SUBMIT_TASK ||\n      action.type === Actions.REMOVE_TASK ||\n      action.type === Actions.SOLVE_TASK,\n    function*() {\n      const tasks = yield select((state: State) => state.tasks);\n      yield call(LocalStorage.saveTasks, tasks);\n    }\n  );\n}\n\nexport default function* rootSaga() {\n  yield all([\n    fork(requestProblems),\n    fork(requestSubmissions),\n    fork(saveUserIds),\n    fork(saveTasks)\n  ]);\n}\n","export interface PooledTask {\n  readonly key: string;\n  readonly validUrl: string | null;\n  readonly createdAt: number;\n  readonly nextReviewTime: number;\n  readonly lastJudgeAccepted: number | null;\n  readonly lastSolvedByUser: number | null;\n}\n\nexport const createTask = (input: string): PooledTask => {\n  const validUrl = isValidUrl(input) ? input : null;\n  const createdAt = Date.now() / 1000;\n  return {\n    key: input,\n    validUrl,\n    createdAt,\n    nextReviewTime: createdAt,\n    lastJudgeAccepted: null,\n    lastSolvedByUser: null\n  };\n};\n\nconst isValidUrl = (url: string): boolean => {\n  try {\n    new URL(url);\n    return true;\n  } catch {\n    return false;\n  }\n};\n","import {\n  Action,\n  CLEAR_SUBMISSIONS,\n  RECEIVE_PROBLEMS,\n  RECEIVE_SUBMISSIONS,\n  REMOVE_TASK,\n  SAVE_USERNAME,\n  SOLVE_TASK,\n  SUBMIT_TASK\n} from \"../actions\";\nimport { List, Map } from \"immutable\";\nimport { State, UserIds } from \"../common\";\nimport { createTask, PooledTask } from \"../common/PooledTask\";\nimport { Problem, Submission } from \"../api\";\nimport * as LocalStorage from \"../common/LocalStorage\";\n\nconst taskReducer = (\n  state: Map<string, PooledTask> = Map(),\n  action: Action\n) => {\n  switch (action.type) {\n    case REMOVE_TASK: {\n      const { key } = action;\n      return state.remove(key);\n    }\n    case SUBMIT_TASK: {\n      const { url } = action;\n      return state.set(url, createTask(url));\n    }\n    case SOLVE_TASK: {\n      const { key, solvedSecond, reviewSecond } = action;\n      const oldTask = state.get(key);\n      if (oldTask) {\n        const newTask = {\n          ...oldTask,\n          lastSolvedByUser: solvedSecond,\n          nextReviewTime: reviewSecond\n        };\n        return state.set(key, newTask);\n      } else {\n        return state;\n      }\n    }\n    default: {\n      return state;\n    }\n  }\n};\n\nconst userIdsReducer = (\n  state: UserIds = {\n    atcoder: \"\",\n    codeforces: \"\",\n    yukicoder: \"\",\n    aoj: \"\"\n  },\n  action: Action\n) => {\n  switch (action.type) {\n    case SAVE_USERNAME: {\n      return action.userIds;\n    }\n    default: {\n      return state;\n    }\n  }\n};\n\nconst submissionReducer = (\n  state: Map<string, List<Submission>> = Map(),\n  action: Action\n) => {\n  switch (action.type) {\n    case RECEIVE_SUBMISSIONS: {\n      const { submissions } = action;\n      return state.mergeWith(\n        (a, b) => a.concat(b),\n        submissions.reduce(\n          (map, submission) =>\n            map.update(submission.problemUrl, List(), list =>\n              list.push(submission)\n            ),\n          Map<string, List<Submission>>()\n        )\n      );\n    }\n    case CLEAR_SUBMISSIONS: {\n      return state.clear();\n    }\n    default:\n      return state;\n  }\n};\n\nconst problemReducer = (\n  state: Map<string, Problem> = Map(),\n  action: Action\n) => {\n  switch (action.type) {\n    case RECEIVE_PROBLEMS: {\n      const { problems } = action;\n      return state.merge(problems.map(problem => [problem.url, problem]));\n    }\n    default: {\n      return state;\n    }\n  }\n};\n\nconst refineTask = (\n  task: PooledTask,\n  submissions: Map<string, List<Submission>>\n) => {\n  if (task.validUrl === null) {\n    return task;\n  }\n  const list = submissions.get(task.validUrl);\n  if (list === undefined) {\n    return task;\n  }\n  const lastJudgeAccepted = list\n    .filter(s => s.result === \"Accepted\" && s.creationTimeSecond !== null)\n    .map(s => s.creationTimeSecond)\n    .max();\n  if (lastJudgeAccepted) {\n    return { ...task, lastJudgeAccepted };\n  } else {\n    return task;\n  }\n};\n\nconst initialize = (): State => ({\n  tasks: LocalStorage.loadTasks(),\n  userIds: LocalStorage.loadUserIds(),\n  submissions: Map(),\n  problems: Map()\n});\n\nconst rootReducer = (state: State = initialize(), action: Action): State => {\n  console.log(action);\n  const userIds = userIdsReducer(state.userIds, action);\n  const submissions = submissionReducer(state.submissions, action);\n  const problems = problemReducer(state.problems, action);\n  const tasks = taskReducer(state.tasks, action);\n  const refinedTasks = tasks.map(task => refineTask(task, submissions));\n  return { tasks: refinedTasks, userIds, submissions, problems };\n};\n\nexport default rootReducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./pages/App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Provider } from \"react-redux\";\nimport rootSaga from \"./sagas\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { applyMiddleware, compose, createStore } from \"redux\";\nimport rootReducer from \"./reducers\";\n\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(\n  rootReducer,\n  compose(applyMiddleware(sagaMiddleware))\n);\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}