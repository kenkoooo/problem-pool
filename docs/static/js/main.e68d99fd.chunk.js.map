{"version":3,"sources":["components/NavigationBar.tsx","actions/ConfigActions.ts","pages/SettingsPage.tsx","common/index.ts","common/Reviewer.ts","components/ModalCard.tsx","actions/TaskActions.ts","components/TodoCards.tsx","pages/TodoPage.tsx","pages/App.tsx","api/AtCoder.ts","api/Codeforces.ts","api/AOJ.ts","api/Yukicoder.ts","actions/ExternalApiActions.ts","sagas/ExternalApiSagas.ts","common/LocalStorage.ts","sagas/DataSagas.ts","sagas/index.ts","common/PooledTask.ts","reducers.ts","index.tsx"],"names":["connect","state","dispatch","props","react","Navbar","color","light","expand","NavbarBrand","tag","RouterLink","to","Nav","className","navbar","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","right","DropdownItem","href","target","SAVE_USER_IDS","SettingsPage","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","atcoder","userIds","yukicoder","codeforces","aoj","_this2","_this$state","isSaved","Row","FormGroup","Label","Input","onChange","e","setState","value","type","placeholder","Button","disabled","onClick","save","React","saveUserIds","formatDate","timeSecond","d","Date","year","getFullYear","month","getMonth","slice","date","getDate","concat","daysToSeconds","days","parseDate","dateString","parseInt","setFullYear","setMonth","setDate","getTime","ModalCard","modalSolvedDate","modalReviewDate","isModalOpen","modalType","nowSecond","now","_this$props","title","url","taskKey","lastJudgeAccepted","lastSolvedByUser","nextReviewTime","judge","nextReviewSuggestion","lastSolvedTimeSecond","reviewResult","currentSecond","duration","Math","max","suggestNextReviewTime","solvedDate","reviewDate","outDated","ListGroup","ListGroupItem","ListGroupItemHeading","Badge","Table","scope","style","undefined","ButtonGroup","key","Modal","isOpen","toggle","ModalHeader","ModalBody","ModalFooter","remove","solvedSecond","reviewSecond","review","CREATE_TASK","DELETE_TASK","UPDATE_TASK","tasks","submissions","problems","deleteTask","solve","nextReviewSecond","updateTask","valueSeq","sort","a","b","map","task","problem","validUrl","get","Col","components_ModalCard","TodoPage","setSuggestions","input","words","toLocaleLowerCase","split","filter","word","length","suggestions","index","every","indexOf","toArray","focusing","submit","isAccepted","list","find","s","result","onKeyDown","min","active","action","pill","components_TodoCards","App","react_router_dom","components_NavigationBar","Container","react_router","exact","path","component","fetchAtCoderSubmissions","userId","fetch","then","r","json","List","submission","contest_id","id","user_id","problemUrl","problem_id","creationTimeSecond","epoch_second","fetchAtCoderProblems","fetchCodeforcesSubmissions","from","arguments","count","payload","contestId","author","members","handle","verdict","fetchCodeforcesProblems","p","name","fetchAOJProblems","page","size","fetchAOJSubmissions","problemId","judgeId","language","submissionDate","fetchYukicoderProblems","No","Title","fetchYukicoderSolvedProblems","receiveProblems","receiveSubmissions","requestAndReceiveProblems","requestAndReceiveSubmissions","fns","regenerator_default","wrap","_context2","prev","next","all","f","mark","_callee","_context","sent","put","t0","console","error","stop","_marked","callers","_context4","select","c","_callee2","_context3","_marked2","saveState","saveData","convertToSaveData","localStorage","setItem","JSON","stringify","parseSaveData","savedString","tmp","parse","Map","_ref","saveDataToLocal","LocalStorage","DataSagas_marked","syncSubmissions","backupLocal","rootSaga","takeLatest","sagas_marked","sagas_marked2","_marked3","isValidUrl","URL","_unused","initialize","savedData","item","getItem","objectSpread","tasksReducer","createdAt","generateTask","has","set","updated","userIdsReducer","problemsReducer","merge","submissionsReducer","receivedMap","reduce","update","push","mergeWith","oldList","newList","rootReducer","log","sagaMiddleware","createSagaMiddleware","store","createStore","compose","applyMiddleware","run","ReactDOM","render","react_default","createElement","es","pages_App","document","getElementById"],"mappings":"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","file":"static/js/main.e68d99fd.chunk.js","sourcesContent":["import {\n  DropdownItem,\n  DropdownMenu,\n  DropdownToggle,\n  Nav,\n  Navbar,\n  NavbarBrand,\n  UncontrolledDropdown\n} from \"reactstrap\";\nimport * as React from \"react\";\nimport { NavLink as RouterLink } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { State } from \"../common\";\nimport { Dispatch } from \"redux\";\n\ninterface Props {}\nconst NavigationBar = (props: Props) => (\n  <Navbar color=\"light\" light expand=\"md\">\n    <NavbarBrand tag={RouterLink} to=\"/\">\n      Problem Pool [beta]\n    </NavbarBrand>\n    <Nav className=\"ml-auto\" navbar>\n      <UncontrolledDropdown nav inNavbar>\n        <DropdownToggle nav caret>\n          \"Settings\"\n        </DropdownToggle>\n        <DropdownMenu right>\n          <DropdownItem tag={RouterLink} to=\"./settings\">\n            User IDs\n          </DropdownItem>\n        </DropdownMenu>\n      </UncontrolledDropdown>\n      <UncontrolledDropdown nav inNavbar>\n        <DropdownToggle nav caret>\n          Links\n        </DropdownToggle>\n        <DropdownMenu right>\n          <DropdownItem\n            href=\"https://github.com/kenkoooo/problem-pool\"\n            target=\"_blank\"\n          >\n            GitHub\n          </DropdownItem>\n          <DropdownItem\n            href=\"https://onlinejudge.u-aizu.ac.jp/\"\n            target=\"_blank\"\n          >\n            AOJ\n          </DropdownItem>\n          <DropdownItem href=\"https://atcoder.jp/\" target=\"_blank\">\n            AtCoder\n          </DropdownItem>\n          <DropdownItem href=\"https://codeforces.com/\" target=\"_blank\">\n            Codeforces\n          </DropdownItem>\n          <DropdownItem href=\"https://yukicoder.me/\" target=\"_blank\">\n            yukicoder\n          </DropdownItem>\n        </DropdownMenu>\n      </UncontrolledDropdown>\n    </Nav>\n  </Navbar>\n);\n\nconst mapStateToProps = (state: State) => ({});\nconst mapDispatchToProps = (dispatch: Dispatch) => ({});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(NavigationBar);\n","import { UserIds } from \"../common\";\n\nexport const SAVE_USER_IDS = \"SAVE_USER_IDS\";\n\nexport const saveUserIds = (userIds: UserIds) => ({\n  type: SAVE_USER_IDS as typeof SAVE_USER_IDS,\n  userIds\n});\n\nexport type ConfigActionType = ReturnType<typeof saveUserIds>;\n","import { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport * as React from \"react\";\nimport { Button, FormGroup, Input, Label, Row } from \"reactstrap\";\nimport { State, UserIds } from \"../common\";\nimport { saveUserIds } from \"../actions/ConfigActions\";\n\ninterface Props {\n  readonly save: (userIds: UserIds) => void;\n  readonly userIds: UserIds;\n}\n\ninterface LocalState {\n  atcoder: string;\n  codeforces: string;\n  yukicoder: string;\n  aoj: string;\n}\n\nclass SettingsPage extends React.Component<Props, LocalState> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      atcoder: props.userIds.atcoder,\n      yukicoder: props.userIds.yukicoder,\n      codeforces: props.userIds.codeforces,\n      aoj: props.userIds.aoj\n    };\n  }\n\n  render() {\n    const { atcoder, codeforces, yukicoder, aoj } = this.state;\n    const isSaved =\n      atcoder === this.props.userIds.atcoder &&\n      codeforces === this.props.userIds.codeforces &&\n      yukicoder === this.props.userIds.yukicoder &&\n      aoj === this.props.userIds.aoj;\n    return (\n      <div>\n        <Row>\n          <FormGroup>\n            <Label>AtCoder ID</Label>\n            <Input\n              onChange={e => this.setState({ atcoder: e.target.value })}\n              type=\"text\"\n              placeholder=\"AtCoder ID\"\n              value={atcoder}\n            />\n          </FormGroup>\n        </Row>\n        <Row>\n          <FormGroup>\n            <Label>AOJ ID</Label>\n            <Input\n              onChange={e => this.setState({ aoj: e.target.value })}\n              type=\"text\"\n              placeholder=\"AOJ ID\"\n              value={aoj}\n            />\n          </FormGroup>\n        </Row>\n        <Row>\n          <FormGroup>\n            <Label>yukicoder ID</Label>\n            <Input\n              onChange={e => this.setState({ yukicoder: e.target.value })}\n              type=\"text\"\n              placeholder=\"yukicoder ID\"\n              value={yukicoder}\n            />\n          </FormGroup>\n        </Row>\n        <Row>\n          <FormGroup>\n            <Label>Codeforces ID</Label>\n            <Input\n              onChange={e => this.setState({ codeforces: e.target.value })}\n              type=\"text\"\n              placeholder=\"Codeforces ID\"\n              value={codeforces}\n            />\n          </FormGroup>\n        </Row>\n        <Row>\n          {isSaved ? (\n            <Button disabled>Saved</Button>\n          ) : (\n            <Button\n              color=\"danger\"\n              onClick={() =>\n                this.props.save({ atcoder, codeforces, yukicoder, aoj })\n              }\n            >\n              Save\n            </Button>\n          )}\n        </Row>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: State) => ({\n  userIds: state.userIds\n});\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  save: (userIds: UserIds) => dispatch(saveUserIds(userIds))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SettingsPage);\n","import { List, Map } from \"immutable\";\nimport { Problem, Submission } from \"../api\";\nimport { PooledTask } from \"./PooledTask\";\n\nexport type OnlineJudge = \"AtCoder\" | \"Codeforces\" | \"yukicoder\" | \"AOJ\";\n\nexport interface UserIds {\n  readonly atcoder: string;\n  readonly codeforces: string;\n  readonly aoj: string;\n  readonly yukicoder: string;\n}\n\nexport interface State {\n  readonly tasks: Map<string, PooledTask>;\n  readonly userIds: UserIds;\n  readonly submissions: Map<string, List<Submission>>;\n  readonly problems: Map<string, Problem>;\n}\n\nexport const formatDate = (timeSecond: number) => {\n  const d = new Date(timeSecond * 1000);\n  const year = d.getFullYear();\n  const month = (\"0\" + (d.getMonth() + 1)).slice(-2);\n  const date = (\"0\" + d.getDate()).slice(-2);\n  return `${year}-${month}-${date}`;\n};\n","export type ReviewResult = \"Solved\" | \"Good\" | \"Hard\" | \"Failed\";\n\nconst daysToSeconds = (days: number) => days * 24 * 3600;\n\nexport const suggestNextReviewTime = (\n  lastSolvedTimeSecond: number | undefined,\n  reviewResult: ReviewResult\n) => {\n  const currentSecond = Date.now() / 1000;\n  const duration = lastSolvedTimeSecond\n    ? currentSecond - lastSolvedTimeSecond\n    : 0;\n  switch (reviewResult) {\n    case \"Solved\":\n      return Math.max(duration * 2, daysToSeconds(4)) + currentSecond;\n    case \"Good\":\n      return Math.max(duration, daysToSeconds(4)) + currentSecond;\n    case \"Hard\":\n      return Math.max(duration / 2, daysToSeconds(4)) + currentSecond;\n    case \"Failed\":\n      return daysToSeconds(4) + currentSecond;\n  }\n};\n","import * as React from \"react\";\nimport {\n  Badge,\n  Button,\n  ButtonGroup,\n  FormGroup,\n  Input,\n  Label,\n  ListGroup,\n  ListGroupItem,\n  ListGroupItemHeading,\n  Modal,\n  ModalBody,\n  ModalFooter,\n  ModalHeader,\n  Table\n} from \"reactstrap\";\nimport { formatDate, OnlineJudge } from \"../common\";\nimport { ReviewResult, suggestNextReviewTime } from \"../common/Reviewer\";\n\ninterface Props {\n  taskKey: string;\n  url: string | undefined;\n  title: string | null;\n  lastJudgeAccepted: number | undefined;\n  lastSolvedByUser: number | undefined;\n  nextReviewTime: number;\n  judge: OnlineJudge | null;\n  remove: () => void;\n  review: (solvedDate: number, reviewDate: number) => void;\n}\n\ninterface LocalState {\n  isModalOpen: boolean;\n  modalSolvedDate: string | null;\n  modalReviewDate: string | null;\n  modalType: ReviewResult | \"Remove\";\n}\n\nconst parseDate = (dateString: string) => {\n  const year = parseInt(dateString.slice(0, 4));\n  const month = parseInt(dateString.slice(5, 7));\n  const date = parseInt(dateString.slice(8, 10));\n  const d = new Date();\n  d.setFullYear(year);\n  d.setMonth(month - 1);\n  d.setDate(date);\n  return d.getTime() / 1000;\n};\n\nclass ModalCard extends React.Component<Props, LocalState> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      modalSolvedDate: null,\n      modalReviewDate: null,\n      isModalOpen: false,\n      modalType: \"Remove\"\n    };\n  }\n  render() {\n    const {\n      isModalOpen,\n      modalType,\n      modalSolvedDate,\n      modalReviewDate\n    } = this.state;\n    const nowSecond = Date.now() / 1000;\n    const {\n      title,\n      url,\n      taskKey,\n      lastJudgeAccepted,\n      lastSolvedByUser,\n      nextReviewTime,\n      judge\n    } = this.props;\n    const nextReviewSuggestion =\n      modalType !== \"Remove\"\n        ? suggestNextReviewTime(lastSolvedByUser, modalType)\n        : -1;\n    const solvedDate =\n      modalSolvedDate !== null ? modalSolvedDate : formatDate(nowSecond);\n    const reviewDate =\n      modalReviewDate !== null\n        ? modalReviewDate\n        : formatDate(nextReviewSuggestion);\n    const outDated = formatDate(nowSecond) >= formatDate(nextReviewTime);\n    return (\n      <ListGroup>\n        <ListGroupItem>\n          <ListGroupItemHeading>\n            {title && url && judge ? (\n              <div>\n                <Badge>{judge}</Badge>{\" \"}\n                <a href={url} target=\"_blank\">\n                  {title}\n                </a>\n              </div>\n            ) : (\n              taskKey\n            )}\n          </ListGroupItemHeading>\n          <Table>\n            <tbody>\n              {\n                <tr>\n                  <th scope=\"row\">Next review</th>\n                  {outDated ? (\n                    <td style={{ color: \"red\" }}>\n                      <strong> {formatDate(nextReviewTime)}</strong>\n                    </td>\n                  ) : (\n                    <td>{formatDate(nextReviewTime)}</td>\n                  )}\n                </tr>\n              }\n              {lastSolvedByUser !== undefined ? (\n                <tr>\n                  <th scope=\"row\">Last solved</th>\n                  <td>{formatDate(lastSolvedByUser)}</td>\n                </tr>\n              ) : null}\n              {lastJudgeAccepted !== undefined ? (\n                <tr>\n                  <th scope=\"row\">Last accepted</th>\n                  <td>{formatDate(lastJudgeAccepted)}</td>\n                </tr>\n              ) : null}\n            </tbody>\n          </Table>\n\n          <ButtonGroup className=\"d-flex justify-content-end\">\n            <Button\n              key=\"solved\"\n              color=\"success\"\n              onClick={() =>\n                this.setState({\n                  isModalOpen: true,\n                  modalType: \"Solved\"\n                })\n              }\n            >\n              Solved\n            </Button>\n            <Button\n              key=\"good\"\n              onClick={() =>\n                this.setState({\n                  isModalOpen: true,\n                  modalType: \"Good\"\n                })\n              }\n            >\n              Good\n            </Button>\n            <Button\n              key=\"hard\"\n              color=\"warning\"\n              onClick={() =>\n                this.setState({\n                  isModalOpen: true,\n                  modalType: \"Hard\"\n                })\n              }\n            >\n              Hard\n            </Button>\n            <Button\n              key=\"failed\"\n              color=\"danger\"\n              onClick={() =>\n                this.setState({\n                  isModalOpen: true,\n                  modalType: \"Failed\"\n                })\n              }\n            >\n              Failed\n            </Button>\n            <Button\n              key=\"remove\"\n              color=\"dark\"\n              onClick={() =>\n                this.setState({\n                  isModalOpen: true,\n                  modalType: \"Remove\"\n                })\n              }\n            >\n              Remove\n            </Button>\n          </ButtonGroup>\n          <Modal\n            isOpen={isModalOpen}\n            toggle={() => this.setState({ isModalOpen: !isModalOpen })}\n          >\n            {modalType === \"Remove\" ? (\n              <div>\n                <ModalHeader>Remove this card?</ModalHeader>\n                <ModalBody>{title ? title : taskKey}</ModalBody>\n                <ModalFooter>\n                  <Button\n                    onClick={() => {\n                      this.setState({ isModalOpen: false });\n                      this.props.remove();\n                    }}\n                  >\n                    Remove\n                  </Button>\n                  <Button onClick={() => this.setState({ isModalOpen: false })}>\n                    Cancel\n                  </Button>\n                </ModalFooter>\n              </div>\n            ) : (\n              <div>\n                <ModalHeader>Next review will be ...</ModalHeader>\n                <ModalBody>\n                  <FormGroup>\n                    <Label>Solved:</Label>\n                    <Input\n                      type=\"date\"\n                      value={solvedDate}\n                      onChange={e =>\n                        this.setState({ modalSolvedDate: e.target.value })\n                      }\n                    />\n                  </FormGroup>\n                  <Label>Next Review:</Label>\n                  <Input\n                    type=\"date\"\n                    value={reviewDate}\n                    onChange={e =>\n                      this.setState({ modalReviewDate: e.target.value })\n                    }\n                  />\n                </ModalBody>\n                <ModalFooter>\n                  <Button\n                    onClick={() => {\n                      this.setState({ isModalOpen: false });\n                      const solvedSecond = parseDate(solvedDate);\n                      const reviewSecond = parseDate(reviewDate);\n                      this.props.review(solvedSecond, reviewSecond);\n                    }}\n                  >\n                    Submit\n                  </Button>\n                  <Button onClick={() => this.setState({ isModalOpen: false })}>\n                    Cancel\n                  </Button>\n                </ModalFooter>\n              </div>\n            )}\n          </Modal>\n        </ListGroupItem>\n      </ListGroup>\n    );\n  }\n}\n\nexport default ModalCard;\n","export const CREATE_TASK = \"CREATE_TASK\";\nexport const DELETE_TASK = \"DELETE_TASK\";\nexport const UPDATE_TASK = \"UPDATE_TASK\";\n\nexport const createTask = (input: string) => ({\n  type: CREATE_TASK as typeof CREATE_TASK,\n  input\n});\n\nexport const deleteTask = (key: string) => ({\n  type: DELETE_TASK as typeof DELETE_TASK,\n  key\n});\n\nexport const updateTask = (\n  key: string,\n  solvedSecond: number,\n  nextReviewSecond: number\n) => ({\n  type: UPDATE_TASK as typeof UPDATE_TASK,\n  key,\n  solvedSecond,\n  nextReviewSecond\n});\nexport type TaskActionType =\n  | ReturnType<typeof createTask>\n  | ReturnType<typeof deleteTask>\n  | ReturnType<typeof updateTask>;\n","import * as React from \"react\";\nimport { Dispatch } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { List, Map } from \"immutable\";\nimport { PooledTask } from \"../common/PooledTask\";\nimport { State } from \"../common\";\nimport { Col, Row } from \"reactstrap\";\nimport { Problem, Submission } from \"../api\";\nimport ModalCard from \"./ModalCard\";\nimport { deleteTask, updateTask } from \"../actions/TaskActions\";\n\ninterface Props {\n  tasks: Map<string, PooledTask>;\n  submissions: Map<string, List<Submission>>;\n  problems: Map<string, Problem>;\n  remove: (key: string) => void;\n  solve: (key: string, solvedSecond: number, reviewSecond: number) => void;\n}\nconst TodoCards = (props: Props) => (\n  <div>\n    {props.tasks\n      .valueSeq()\n      .sort((a, b) => a.nextReviewTime - b.nextReviewTime)\n      .map(task => {\n        const problem = task.validUrl\n          ? props.problems.get(task.validUrl)\n          : undefined;\n        const { lastJudgeAccepted, lastSolvedByUser, nextReviewTime } = task;\n        return (\n          <Row key={task.key}>\n            <Col>\n              <ModalCard\n                taskKey={task.key}\n                url={task.validUrl}\n                title={problem ? problem.title : null}\n                lastJudgeAccepted={lastJudgeAccepted}\n                lastSolvedByUser={lastSolvedByUser}\n                nextReviewTime={nextReviewTime}\n                remove={() => props.remove(task.key)}\n                review={(solvedDate: number, reviewDate: number) =>\n                  props.solve(task.key, solvedDate, reviewDate)\n                }\n                judge={problem ? problem.judge : null}\n              />\n            </Col>\n          </Row>\n        );\n      })}\n  </div>\n);\n\nconst mapStateToProps = (state: State) => ({\n  tasks: state.tasks,\n  submissions: state.submissions,\n  problems: state.problems\n});\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  remove: (key: string) => dispatch(deleteTask(key)),\n  solve: (key: string, solvedSecond: number, reviewSecond: number) =>\n    dispatch(updateTask(key, solvedSecond, reviewSecond))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TodoCards);\n","import { connect } from \"react-redux\";\nimport { Badge, Col, Input, ListGroup, ListGroupItem, Row } from \"reactstrap\";\nimport * as React from \"react\";\nimport { Dispatch } from \"redux\";\nimport { List, Map } from \"immutable\";\nimport { Problem, Submission } from \"../api\";\nimport { State } from \"../common\";\nimport TodoCards from \"../components/TodoCards\";\nimport { createTask } from \"../actions/TaskActions\";\n\ninterface Props {\n  readonly submit: (problem: string) => void;\n  readonly problems: Map<string, Problem>;\n  readonly submissions: Map<string, List<Submission>>;\n}\n\ninterface LocalState {\n  input: string;\n  suggestions: Problem[];\n  focusing: number;\n}\n\nclass TodoPage extends React.Component<Props, LocalState> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      input: \"\",\n      suggestions: [],\n      focusing: -1\n    };\n  }\n\n  setSuggestions = (input: string) => {\n    const words = input\n      .toLocaleLowerCase()\n      .split(\" \")\n      .filter(word => word.length > 0);\n    if (words.length > 0) {\n      const suggestions = this.props.problems\n        .valueSeq()\n        .filter(problem => {\n          const index = (\n            problem.title +\n            \" \" +\n            problem.url +\n            \" \" +\n            problem.judge\n          ).toLocaleLowerCase();\n          return words.every(word => index.indexOf(word) !== -1);\n        })\n        .slice(0, 10)\n        .toArray();\n      this.setState({ suggestions, focusing: -1 });\n    } else {\n      this.setState({ suggestions: [], focusing: -1 });\n    }\n  };\n\n  submit = (key: string) => {\n    this.props.submit(key);\n    this.setState({\n      input: \"\",\n      suggestions: [],\n      focusing: -1\n    });\n  };\n\n  render() {\n    const { suggestions, focusing } = this.state;\n    const { submissions } = this.props;\n    const isAccepted = (problem: Problem) => {\n      const list = submissions.get(problem.url);\n      return (\n        list !== undefined &&\n        list.find(s => s.result === \"Accepted\") !== undefined\n      );\n    };\n\n    return (\n      <div>\n        <Row>\n          <Col>\n            <Input\n              onKeyDown={e => {\n                if (e.key === \"Enter\") {\n                  if (0 <= focusing && focusing < suggestions.length) {\n                    this.submit(suggestions[focusing].url);\n                  } else {\n                    this.submit(this.state.input);\n                  }\n                } else if (e.key === \"ArrowDown\") {\n                  this.setState({\n                    focusing: Math.min(focusing + 1, suggestions.length - 1)\n                  });\n                } else if (e.key === \"ArrowUp\") {\n                  this.setState({\n                    focusing: Math.max(focusing - 1, -1)\n                  });\n                }\n              }}\n              type=\"text\"\n              onChange={e => {\n                const input = e.target.value;\n                this.setState({ input });\n                this.setSuggestions(input);\n              }}\n              value={this.state.input}\n            />\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <ListGroup>\n              {this.state.suggestions.map((problem, index) => (\n                <ListGroupItem\n                  color={isAccepted(problem) ? \"success\" : undefined}\n                  active={index === focusing}\n                  key={problem.url}\n                  onClick={() => this.submit(problem.url)}\n                  action\n                >\n                  {problem.title} <Badge pill>{problem.judge}</Badge>\n                </ListGroupItem>\n              ))}\n            </ListGroup>\n          </Col>\n        </Row>\n        <TodoCards />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: State) => ({\n  problems: state.problems,\n  submissions: state.submissions\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  submit: (problem: string) => dispatch(createTask(problem))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TodoPage);\n","import { HashRouter, Route, Switch } from \"react-router-dom\";\nimport NavigationBar from \"../components/NavigationBar\";\nimport * as React from \"react\";\nimport { Container } from \"reactstrap\";\nimport SettingsPage from \"./SettingsPage\";\nimport TodoPage from \"./TodoPage\";\n\nconst App = () => (\n  <HashRouter>\n    <NavigationBar />\n    <Container>\n      <Switch>\n        <Route>\n          <Route exact path=\"/\" component={TodoPage} />\n          <Route exact path=\"/settings\" component={SettingsPage} />\n        </Route>\n      </Switch>\n    </Container>\n  </HashRouter>\n);\n\nexport default App;\n","import { Problem, Submission } from \"./index\";\nimport { List } from \"immutable\";\n\nexport const fetchAtCoderSubmissions = (userId: string) =>\n  fetch(`https://kenkoooo.com/atcoder/atcoder-api/results?user=${userId}`)\n    .then(r => r.json())\n    .then(\n      (submissions: AtCoderSubmission[]): List<Submission> =>\n        List(\n          submissions.map(submission => ({\n            url: `https://atcoder.jp/contests/${submission.contest_id}/submissions/${submission.id}`,\n            userId: submission.user_id,\n            result: submission.result === \"AC\" ? \"Accepted\" : \"Rejected\",\n            problemUrl: `https://atcoder.jp/contests/${submission.contest_id}/tasks/${submission.problem_id}`,\n            creationTimeSecond: submission.epoch_second\n          }))\n        )\n    );\nexport const fetchAtCoderProblems = () =>\n  fetch(\"https://kenkoooo.com/atcoder/resources/problems.json\")\n    .then(r => r.json())\n    .then(\n      (problems: AtCoderProblem[]): List<Problem> =>\n        List(\n          problems.map(problem => ({\n            url: `https://atcoder.jp/contests/${problem.contest_id}/tasks/${problem.id}`,\n            title: problem.title,\n            judge: \"AtCoder\"\n          }))\n        )\n    );\n\ninterface AtCoderSubmission {\n  id: number;\n  epoch_second: number;\n  problem_id: string;\n  contest_id: string;\n  user_id: string;\n  result: string;\n}\n\ninterface AtCoderProblem {\n  title: string;\n  contest_id: string;\n  id: string;\n}\n","import { Problem, Submission } from \"./index\";\nimport { List } from \"immutable\";\n\nexport const fetchCodeforcesSubmissions = (\n  userId: string,\n  from: number = 1,\n  count: number = 100000\n) =>\n  fetch(\n    `https://codeforces.com/api/user.status?handle=${userId}&from=${from}&count=${count}`\n  )\n    .then(r => r.json())\n    .then(\n      (payload: {\n        result: {\n          id: number;\n          creationTimeSecond: number;\n          problem: {\n            contestId: number;\n            index: string;\n            name: string;\n          };\n          author: {\n            members: { handle: string }[];\n          };\n          programmingLanguage: string;\n          verdict: string;\n        }[];\n      }): List<Submission> =>\n        List(\n          payload.result.map(s => ({\n            url: `https://codeforces.com/contest/${s.problem.contestId}/submission/${s.id}`,\n            userId: s.author.members[0].handle,\n            result: s.verdict === \"OK\" ? \"Accepted\" : \"Rejected\",\n            problemUrl: `https://codeforces.com/contest/${s.problem.contestId}/problem/${s.problem.index}`,\n            creationTimeSecond: s.creationTimeSecond\n          }))\n        )\n    );\n\nexport const fetchCodeforcesProblems = () =>\n  fetch(\"https://codeforces.com/api/problemset.problems\")\n    .then(r => r.json())\n    .then(\n      (payload: {\n        result: {\n          problems: {\n            contestId: number;\n            index: string;\n            name: string;\n            points: number | undefined;\n          }[];\n        };\n      }): List<Problem> =>\n        List(\n          payload.result.problems.map(p => ({\n            url: `https://codeforces.com/contest/${p.contestId}/problem/${p.index}`,\n            title: p.name,\n            judge: \"Codeforces\"\n          }))\n        )\n    );\n","import { List } from \"immutable\";\nimport { Problem, Submission } from \"./index\";\n\nexport const fetchAOJProblems = (page: number = 0, size: number = 10000) =>\n  fetch(`https://judgeapi.u-aizu.ac.jp/problems?page=${page}&size=${size}`)\n    .then(r => r.json())\n    .then(\n      (\n        problems: {\n          id: string;\n          name: string;\n        }[]\n      ): List<Problem> =>\n        List(\n          problems.map(problem => ({\n            url: `https://onlinejudge.u-aizu.ac.jp/problems/${problem.id}`,\n            title: `${problem.id}: ${problem.name}`,\n            judge: \"AOJ\"\n          }))\n        )\n    );\n\nexport const fetchAOJSubmissions = (\n  userId: string,\n  page: number = 0,\n  size: number = 100000\n) =>\n  fetch(\n    `https://judgeapi.u-aizu.ac.jp/solutions/users/${userId}?page=${page}&size=${size}`\n  )\n    .then(r => r.json())\n    .then(\n      (\n        submissions: {\n          judgeId: number;\n          submissionDate: number;\n          userId: string;\n          problemId: string;\n          language: string;\n        }[]\n      ): List<Submission> =>\n        List(\n          submissions.map(submission => ({\n            url: `https://onlinejudge.u-aizu.ac.jp/solutions/problem/${submission.problemId}/review/${submission.judgeId}/${submission.userId}/${submission.language}`,\n            problemUrl: `https://onlinejudge.u-aizu.ac.jp/problems/${submission.problemId}`,\n            userId: submission.userId,\n            result: \"Accepted\",\n            creationTimeSecond: submission.submissionDate / 1000\n          }))\n        )\n    );\n","import { List } from \"immutable\";\nimport { Problem, Submission } from \"./index\";\n\nexport const fetchYukicoderProblems = () =>\n  fetch(\"https://yukicoder.me/api/v1/problems\")\n    .then(r => r.json())\n    .then(\n      (\n        problems: { No: number; ProblemId: number; Title: string }[]\n      ): List<Problem> =>\n        List(\n          problems.map(problem => ({\n            url: `https://yukicoder.me/problems/no/${problem.No}`,\n            title: `No.${problem.No} ${problem.Title}`,\n            judge: \"yukicoder\"\n          }))\n        )\n    );\n\nexport const fetchYukicoderSolvedProblems = (userId: string) =>\n  fetch(`https://yukicoder.me/api/v1/solved/name/${userId}`)\n    .then(r => r.json())\n    .then(\n      (\n        problems: { No: number; ProblemId: number; Title: string }[]\n      ): List<Submission> =>\n        List(\n          problems.map(problem => ({\n            url: `https://yukicoder.me/problems/no/${problem.No}`,\n            userId: userId,\n            result: \"Accepted\",\n            problemUrl: `https://yukicoder.me/problems/no/${problem.No}`,\n            creationTimeSecond: undefined\n          }))\n        )\n    );\n","import { OnlineJudge } from \"../common\";\nimport { List } from \"immutable\";\nimport { Problem, Submission } from \"../api\";\n\nexport const RECEIVE_PROBLEMS = \"RECEIVE_PROBLEMS\";\nexport const REQUEST_SUBMISSIONS = \"REQUEST_SUBMISSIONS\";\nexport const RECEIVE_SUBMISSIONS = \"RECEIVE_SUBMISSIONS\";\n\nexport const receiveProblems = (problems: List<Problem>) => ({\n  type: RECEIVE_PROBLEMS as typeof RECEIVE_PROBLEMS,\n  problems\n});\n\nexport const requestSubmissions = (userId: string, judge: OnlineJudge) => ({\n  type: REQUEST_SUBMISSIONS as typeof REQUEST_SUBMISSIONS,\n  judge,\n  userId\n});\n\nexport const receiveSubmissions = (submissions: List<Submission>) => ({\n  type: RECEIVE_SUBMISSIONS as typeof RECEIVE_SUBMISSIONS,\n  submissions\n});\n\nexport type ExternalApiActionType =\n  | ReturnType<typeof receiveProblems>\n  | ReturnType<typeof requestSubmissions>\n  | ReturnType<typeof receiveSubmissions>;\n","import { fetchAtCoderProblems, fetchAtCoderSubmissions } from \"../api/AtCoder\";\nimport {\n  fetchCodeforcesProblems,\n  fetchCodeforcesSubmissions\n} from \"../api/Codeforces\";\nimport { fetchAOJProblems, fetchAOJSubmissions } from \"../api/AOJ\";\nimport {\n  fetchYukicoderProblems,\n  fetchYukicoderSolvedProblems\n} from \"../api/Yukicoder\";\nimport { all, call, put, select } from \"redux-saga/effects\";\nimport {\n  receiveProblems,\n  receiveSubmissions\n} from \"../actions/ExternalApiActions\";\nimport { State } from \"../common\";\n\nexport function* requestAndReceiveProblems() {\n  const fns = [\n    fetchAtCoderProblems,\n    fetchCodeforcesProblems,\n    fetchAOJProblems,\n    fetchYukicoderProblems\n  ];\n  yield all(\n    fns.map(f =>\n      call(function*() {\n        try {\n          const problems = yield call(f);\n          yield put(receiveProblems(problems));\n        } catch (e) {\n          console.error(\"Failed to fetch problems. \" + e);\n        }\n      })\n    )\n  );\n}\n\nexport function* requestAndReceiveSubmissions() {\n  const userIds = yield select((state: State) => state.userIds);\n  const callers = [\n    { f: fetchAtCoderSubmissions, id: userIds.atcoder },\n    { f: fetchCodeforcesSubmissions, id: userIds.codeforces },\n    { f: fetchAOJSubmissions, id: userIds.aoj },\n    { f: fetchYukicoderSolvedProblems, id: userIds.yukicoder }\n  ];\n  yield all(\n    callers\n      .filter(c => c.id.length > 0)\n      .map(c =>\n        call(function*() {\n          try {\n            const submissions = yield call(c.f, c.id);\n            yield put(receiveSubmissions(submissions));\n          } catch (e) {\n            console.error(\"Failed to fetch submissions. \" + e);\n          }\n        })\n      )\n  );\n}\n","import { State, UserIds } from \"./index\";\nimport { Map } from \"immutable\";\nimport { PooledTask } from \"./PooledTask\";\n\nconst LOCAL_STORAGE_KEY = \"SAVE_DATA\";\n\nexport const saveState = (state: State) => {\n  const saveData = convertToSaveData(state);\n  localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(saveData));\n};\nexport const getSaveData = (): SaveData | undefined => {\n  const item = localStorage.getItem(LOCAL_STORAGE_KEY);\n  if (item === null) {\n    return undefined;\n  } else {\n    return parseSaveData(item);\n  }\n};\n\nexport const parseSaveData = (savedString: string): SaveData | undefined => {\n  try {\n    const tmp = JSON.parse(savedString);\n    return {\n      userIds: tmp.userIds,\n      tasks: Map(tmp.tasks),\n    };\n  } catch (e) {\n    console.error(e);\n    return undefined;\n  }\n};\n\nexport interface SaveData {\n  readonly tasks: Map<string, PooledTask>;\n  readonly userIds: UserIds;\n}\n\nexport const convertToSaveData = ({ tasks, userIds }: State): SaveData => ({\n  tasks,\n  userIds\n});\n","import { select, call } from \"redux-saga/effects\";\nimport { State } from \"../common\";\nimport * as LocalStorage from \"../common/LocalStorage\";\n\nexport function* saveDataToLocal() {\n  const state = yield select((state: State) => state);\n  yield call(LocalStorage.saveState, state);\n}\n","import { all, call, takeLatest } from \"redux-saga/effects\";\nimport { SAVE_USER_IDS } from \"../actions/ConfigActions\";\nimport {\n  requestAndReceiveProblems,\n  requestAndReceiveSubmissions\n} from \"./ExternalApiSagas\";\nimport { saveDataToLocal } from \"./DataSagas\";\nimport { CREATE_TASK, DELETE_TASK, UPDATE_TASK } from \"../actions/TaskActions\";\n\nfunction* syncSubmissions() {\n  yield takeLatest(SAVE_USER_IDS, requestAndReceiveSubmissions);\n}\n\nfunction* backupLocal() {\n  yield takeLatest(\n    [CREATE_TASK, DELETE_TASK, UPDATE_TASK, SAVE_USER_IDS],\n    saveDataToLocal\n  );\n}\n\nfunction* rootSaga() {\n  yield all([\n    call(backupLocal),\n    call(requestAndReceiveProblems),\n    call(syncSubmissions)\n  ]);\n}\n\nexport default rootSaga;\n","export interface PooledTask {\n  readonly key: string;\n  readonly validUrl: string | undefined;\n  readonly createdAt: number;\n  readonly nextReviewTime: number;\n  readonly lastJudgeAccepted: number | undefined;\n  readonly lastSolvedByUser: number | undefined;\n}\n\nexport const generateTask = (input: string): PooledTask => {\n  const validUrl = isValidUrl(input) ? input : undefined;\n  const createdAt = Date.now() / 1000;\n  return {\n    key: input,\n    validUrl,\n    createdAt,\n    nextReviewTime: createdAt,\n    lastJudgeAccepted: undefined,\n    lastSolvedByUser: undefined\n  };\n};\n\nconst isValidUrl = (url: string): boolean => {\n  try {\n    new URL(url);\n    return true;\n  } catch {\n    return false;\n  }\n};\n","import { State, UserIds } from \"./common\";\nimport { generateTask, PooledTask } from \"./common/PooledTask\";\nimport { List, Map } from \"immutable\";\nimport Action from \"./actions\";\nimport { Problem, Submission } from \"./api\";\nimport { CREATE_TASK, DELETE_TASK, UPDATE_TASK } from \"./actions/TaskActions\";\nimport { SAVE_USER_IDS } from \"./actions/ConfigActions\";\nimport {\n  RECEIVE_PROBLEMS,\n  RECEIVE_SUBMISSIONS\n} from \"./actions/ExternalApiActions\";\nimport * as LocalStorage from \"./common/LocalStorage\";\nconst initialize = (): State => {\n  const savedData = LocalStorage.getSaveData();\n  if (savedData === undefined) {\n    // TODO remove this line in the future.\n    const item = localStorage.getItem(\"TASKS\");\n    const tasks = item\n      ? Map<string, PooledTask>(JSON.parse(item))\n      : Map<string, PooledTask>();\n\n    return {\n      tasks: tasks,\n      userIds: {\n        atcoder: \"\",\n        codeforces: \"\",\n        aoj: \"\",\n        yukicoder: \"\"\n      },\n      submissions: Map(),\n      problems: Map()\n    };\n  } else {\n    return {\n      submissions: Map(),\n      problems: Map(),\n      ...savedData\n    };\n  }\n};\n\nconst tasksReducer = (tasks: Map<string, PooledTask>, action: Action) => {\n  switch (action.type) {\n    case CREATE_TASK: {\n      const { input } = action;\n      const task = generateTask(input);\n      if (tasks.has(task.key)) {\n        return tasks;\n      } else {\n        return tasks.set(task.key, task);\n      }\n    }\n    case DELETE_TASK: {\n      const { key } = action;\n      return tasks.remove(key);\n    }\n    case UPDATE_TASK: {\n      const { key, solvedSecond, nextReviewSecond } = action;\n      const item = tasks.get(key);\n      if (item === undefined) {\n        return tasks;\n      } else {\n        const updated = {\n          ...item,\n          lastSolvedByUser: solvedSecond,\n          nextReviewTime: nextReviewSecond\n        };\n        return tasks.set(key, updated);\n      }\n    }\n    default: {\n      return tasks;\n    }\n  }\n};\n\nconst userIdsReducer = (userIds: UserIds, action: Action) => {\n  switch (action.type) {\n    case SAVE_USER_IDS: {\n      const { userIds } = action;\n      return userIds;\n    }\n    default: {\n      return userIds;\n    }\n  }\n};\n\nconst problemsReducer = (problems: Map<string, Problem>, action: Action) => {\n  switch (action.type) {\n    case RECEIVE_PROBLEMS: {\n      return problems.merge(action.problems.map(p => [p.url, p]));\n    }\n    default: {\n      return problems;\n    }\n  }\n};\n\nconst submissionsReducer = (\n  submissions: Map<string, List<Submission>>,\n  action: Action\n) => {\n  switch (action.type) {\n    case RECEIVE_SUBMISSIONS: {\n      const { submissions: received } = action;\n      const receivedMap = received.reduce(\n        (map, s) => map.update(s.problemUrl, List(), list => list.push(s)),\n        Map<string, List<Submission>>()\n      );\n      return submissions.mergeWith(\n        (oldList, newList) => oldList.merge(newList),\n        receivedMap\n      );\n    }\n    default: {\n      return submissions;\n    }\n  }\n};\n\nconst rootReducer = (state: State = initialize(), action: Action): State => {\n  console.log(action);\n  return {\n    tasks: tasksReducer(state.tasks, action),\n    userIds: userIdsReducer(state.userIds, action),\n    submissions: submissionsReducer(state.submissions, action),\n    problems: problemsReducer(state.problems, action)\n  };\n};\nexport default rootReducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./pages/App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Provider } from \"react-redux\";\nimport rootSaga from \"./sagas\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { applyMiddleware, compose, createStore } from \"redux\";\nimport rootReducer from \"./reducers\";\n\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(\n  rootReducer,\n  compose(applyMiddleware(sagaMiddleware))\n);\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}